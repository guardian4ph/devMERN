{"ast":null,"code":"import axios from \"axios\";\nimport { CREATE_INCIDENT, ERROR_CREATE_INCIDENT, INCIDENT_SUMMIT_SUCCESS, INCIDENT_SUMMIT_FAIL // GET_INCIDENT_BY_ID,\n// GET_INCIDENT_BY_ID_FAIL,\n, GET_INCIDENTS, GET_INCIDENTS_FAIL, CLEAR_INCIDENT, GET_INCIDENT_BY_OPCEN, GET_INCIDENT_BY_OPCEN_FAIL, GET_INCIDENT_BY_USER, GET_INCIDENT_BY_USER_FAIL //   DELETE_OPCEN,\n//   UPDATE_OPCEN,\n//   ADD_ADMIN,\n//   DELETE_ADMIN,\n} from \"./types\";\nimport { setAlert } from \"./alert\";\nexport const setCreateIncident = incidentType => dispatch => {\n  try {\n    dispatch({\n      type: CREATE_INCIDENT,\n      payload: incidentType\n    });\n  } catch (err) {\n    dispatch({\n      type: ERROR_CREATE_INCIDENT,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const clearIncident = () => dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_INCIDENT\n    });\n  } catch (err) {\n    dispatch({\n      type: ERROR_CREATE_INCIDENT,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const submitIncident = ({\n  user,\n  type,\n  scompleteaddress,\n  scity,\n  sstate,\n  sarea,\n  slat,\n  slng\n}) => async dispatch => {\n  const body = JSON.stringify({\n    user,\n    type,\n    scompleteaddress,\n    scity,\n    sstate,\n    sarea,\n    slat,\n    slng\n  });\n\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(\"api/incident\", body, config);\n    dispatch({\n      type: INCIDENT_SUMMIT_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: INCIDENT_SUMMIT_FAIL\n    });\n  }\n}; //Get incidents all by user\n\nexport const getIncidentByUser = user_id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/operation_center/myopcen/${user_id}`);\n    dispatch({\n      type: GET_INCIDENT_BY_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_INCIDENT_BY_USER_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get incidents all by incident ID\n\nexport const getIncidentById = incident_id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/operation_center/myopcen/${incident_id}`);\n    dispatch({\n      type: GET_INCIDENT_BY_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_INCIDENT_BY_USER_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get incident by opcen\n\nexport const getIncidentByOpcen = opcen_id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/operation_center/myopcen/${opcen_id}`);\n    dispatch({\n      type: GET_INCIDENT_BY_OPCEN,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_INCIDENT_BY_OPCEN_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get incident by incident ID\n\nexport const getIncident = () => async dispatch => {\n  try {\n    const res = await axios.get(`/api/operation_center/myopcen`);\n    dispatch({\n      type: GET_INCIDENTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_INCIDENTS_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["D:/1App/client/src/actions/incident.js"],"names":["axios","CREATE_INCIDENT","ERROR_CREATE_INCIDENT","INCIDENT_SUMMIT_SUCCESS","INCIDENT_SUMMIT_FAIL","GET_INCIDENTS","GET_INCIDENTS_FAIL","CLEAR_INCIDENT","GET_INCIDENT_BY_OPCEN","GET_INCIDENT_BY_OPCEN_FAIL","GET_INCIDENT_BY_USER","GET_INCIDENT_BY_USER_FAIL","setAlert","setCreateIncident","incidentType","dispatch","type","payload","err","msg","response","statusText","status","clearIncident","submitIncident","user","scompleteaddress","scity","sstate","sarea","slat","slng","body","JSON","stringify","config","headers","res","post","data","errors","forEach","error","getIncidentByUser","user_id","get","getIncidentById","incident_id","getIncidentByOpcen","opcen_id","getIncident"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  CREATE_INCIDENT,\r\n  ERROR_CREATE_INCIDENT,\r\n  INCIDENT_SUMMIT_SUCCESS,\r\n  INCIDENT_SUMMIT_FAIL,\r\n  // GET_INCIDENT_BY_ID,\r\n  // GET_INCIDENT_BY_ID_FAIL,\r\n  GET_INCIDENTS,\r\n  GET_INCIDENTS_FAIL,\r\n  CLEAR_INCIDENT,\r\n  GET_INCIDENT_BY_OPCEN,\r\n  GET_INCIDENT_BY_OPCEN_FAIL,\r\n  GET_INCIDENT_BY_USER,\r\n  GET_INCIDENT_BY_USER_FAIL,\r\n\r\n  //   DELETE_OPCEN,\r\n  //   UPDATE_OPCEN,\r\n  //   ADD_ADMIN,\r\n  //   DELETE_ADMIN,\r\n} from \"./types\";\r\nimport { setAlert } from \"./alert\";\r\n\r\nexport const setCreateIncident = incidentType => dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: CREATE_INCIDENT,\r\n      payload: incidentType,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ERROR_CREATE_INCIDENT,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\nexport const clearIncident = () => dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: CLEAR_INCIDENT,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ERROR_CREATE_INCIDENT,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\nexport const submitIncident =\r\n  ({ user, type, scompleteaddress, scity, sstate, sarea, slat, slng }) =>\r\n  async dispatch => {\r\n    const body = JSON.stringify({\r\n      user,\r\n      type,\r\n      scompleteaddress,\r\n      scity,\r\n      sstate,\r\n      sarea,\r\n      slat,\r\n      slng,\r\n    });\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n      const res = await axios.post(\"api/incident\", body, config);\r\n      dispatch({\r\n        type: INCIDENT_SUMMIT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n      if (errors) {\r\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n      }\r\n\r\n      dispatch({\r\n        type: INCIDENT_SUMMIT_FAIL,\r\n      });\r\n    }\r\n  };\r\n\r\n//Get incidents all by user\r\n\r\nexport const getIncidentByUser = user_id => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/operation_center/myopcen/${user_id}`);\r\n    dispatch({\r\n      type: GET_INCIDENT_BY_USER,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_INCIDENT_BY_USER_FAIL,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n//Get incidents all by incident ID\r\n\r\nexport const getIncidentById = incident_id => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/operation_center/myopcen/${incident_id}`);\r\n    dispatch({\r\n      type: GET_INCIDENT_BY_USER,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_INCIDENT_BY_USER_FAIL,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Get incident by opcen\r\nexport const getIncidentByOpcen = opcen_id => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/operation_center/myopcen/${opcen_id}`);\r\n    dispatch({\r\n      type: GET_INCIDENT_BY_OPCEN,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_INCIDENT_BY_OPCEN_FAIL,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n// get incident by incident ID\r\nexport const getIncident = () => async dispatch => {\r\n  try {\r\n    const res = await axios.get(`/api/operation_center/myopcen`);\r\n    dispatch({\r\n      type: GET_INCIDENTS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_INCIDENTS_FAIL,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}