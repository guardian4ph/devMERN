{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\layout\\\\Map2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport { GoogleMap, useJsApiLoader, Marker, InfoWindow, Autocomplete } from \"@react-google-maps/api\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\n\nconst Map = () => {\n  _s();\n\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: \"google-map-script\",\n    googleMapsApiKey: \"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\"\n  });\n  const [map, setMap] = useState({\n    adddress: \"\",\n    city: \"\",\n    area: \"\",\n    state: \"\",\n    zoom: 15,\n    height: 400,\n    mapPosition: {\n      // Load to specific address/location\n      lat: 10.3272994,\n      lng: 123.9431079 // lat: 0,\n      // lng: 0,\n\n    },\n    markerPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    }\n  });\n  const onLoad = useCallback(function callback(map) {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(\"Current location\", navigator.geolocation.getCurrentPosition);\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            console.log(\"Response\", response);\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  state = this.getState(addressArray),\n                  area = this.getArea(addressArray);\n            console.log(\"city is\", city);\n            console.log(\"Area is\", area);\n            console.log(\"state is\", state);\n            console.log(\"Address is\", address);\n            this.setState({\n              address: address ? address : \"\",\n              city: city ? city : \"\",\n              area: area ? area : \"\",\n              state: state ? city : \"\"\n            });\n          });\n        });\n      });\n    }\n  }, []);\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  const containerStyle = {\n    width: \"50%\",\n    height: \"200px\",\n    padding: \".5rem\",\n    marginTop: \".5rem\",\n    maxWidth: 1500,\n    margin: \"auto\",\n    borderRadius: \"5px\"\n  };\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: map.mapPosition,\n    zoom: map.zoom,\n    onLoad: onLoad,\n    onUnmount: onUnmount // defaultOptions={{ styles: mapStyles }}\n    ,\n    children: /*#__PURE__*/_jsxDEV(Marker, {\n      position: map.mapPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n};\n\n_s(Map, \"9IJLTwpwrf0QGAZa+J77l31Yum4=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/1App/client/src/components/layout/Map2.js"],"names":["React","useState","useCallback","GoogleMap","useJsApiLoader","Marker","InfoWindow","Autocomplete","Geocode","setApiKey","Map","isLoaded","id","googleMapsApiKey","map","setMap","adddress","city","area","state","zoom","height","mapPosition","lat","lng","markerPosition","onLoad","callback","navigator","geolocation","getCurrentPosition","position","console","log","setState","coords","latitude","longitude","fromLatLng","then","response","address","results","formatted_address","addressArray","address_components","getCity","getState","getArea","onUnmount","containerStyle","width","padding","marginTop","maxWidth","margin","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useJsApiLoader,\r\n  Marker,\r\n  InfoWindow,\r\n  Autocomplete,\r\n} from \"@react-google-maps/api\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nGeocode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\r\n\r\nconst Map = () => {\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: \"google-map-script\",\r\n    googleMapsApiKey: \"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\",\r\n  });\r\n\r\n  const [map, setMap] = useState({\r\n    adddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n    zoom: 15,\r\n    height: 400,\r\n    mapPosition: {\r\n      // Load to specific address/location\r\n      lat: 10.3272994,\r\n      lng: 123.9431079,\r\n      // lat: 0,\r\n      // lng: 0,\r\n    },\r\n    markerPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n  });\r\n\r\n  const onLoad = useCallback(function callback(map) {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        console.log(\r\n          \"Current location\",\r\n          navigator.geolocation.getCurrentPosition\r\n        );\r\n        this.setState(\r\n          {\r\n            mapPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n            markerPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n          },\r\n          () => {\r\n            Geocode.fromLatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            ).then(response => {\r\n              console.log(\"Response\", response);\r\n\r\n              const address = response.results[0].formatted_address,\r\n                addressArray = response.results[0].address_components,\r\n                city = this.getCity(addressArray),\r\n                state = this.getState(addressArray),\r\n                area = this.getArea(addressArray);\r\n\r\n              console.log(\"city is\", city);\r\n              console.log(\"Area is\", area);\r\n              console.log(\"state is\", state);\r\n              console.log(\"Address is\", address);\r\n\r\n              this.setState({\r\n                address: address ? address : \"\",\r\n                city: city ? city : \"\",\r\n                area: area ? area : \"\",\r\n                state: state ? city : \"\",\r\n              });\r\n            });\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const onUnmount = useCallback(function callback(map) {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  const containerStyle = {\r\n    width: \"50%\",\r\n    height: \"200px\",\r\n    padding: \".5rem\",\r\n    marginTop: \".5rem\",\r\n    maxWidth: 1500,\r\n    margin: \"auto\",\r\n    borderRadius: \"5px\",\r\n  };\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={containerStyle}\r\n      center={map.mapPosition}\r\n      zoom={map.zoom}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n\r\n      // defaultOptions={{ styles: mapStyles }}\r\n    >\r\n      {/* <AutoComplete\r\n          className='autocomplete'\r\n          types={[\"(regions)\"]}\r\n           onPlaceSelected={onPlaceSelected}\r\n        /> */}\r\n\r\n      <Marker position={map.mapPosition}></Marker>\r\n    </GoogleMap>\r\n  ) : (\r\n    <> </>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}