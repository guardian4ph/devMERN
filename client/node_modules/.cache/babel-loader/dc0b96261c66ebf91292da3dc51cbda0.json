{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\auth\\\\ChangePassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Redirect, withRouter } from \"react-router-dom\"; //Connect the component to redux\n//See Export down end file\n\nimport { connect } from \"react-redux\"; //Bring actions in the action folders\n\nimport { setAlert } from \"../../actions/alert\";\nimport { changepassword } from \"../../actions/sms\";\nimport { forgot_password } from \"../../actions/auth\";\nimport PropTypes from \"prop-types\";\n\nconst ChangePassword = ({\n  auth,\n  setAlert,\n  forgot_password,\n  changepassword,\n  isAuthenticated\n}) => {\n  _s();\n\n  //formdata is the state, setFormData is the function use to update the state\n  //Use state hooks\n  const [formData, setFormData] = useState({\n    password: \"\",\n    password2: \"\"\n  });\n  let email = auth.email;\n  useEffect(() => {\n    forgot_password(email);\n  }, [email]); //destructure so you would do formData.name formData.number\n  //Object Syntax use {}\n\n  const {\n    password,\n    password2\n  } = formData;\n\n  const onChange = async (c) => setFormData({ ...formData,\n    [c.target.name]: c.target.value\n  });\n\n  const onSubmit = async c => {\n    c.preventDefault();\n\n    if (password !== password2) {\n      setAlert(\"Passwords dont match\", \"danger\");\n    } else {\n      //register is the action from reducers\n      changepassword(auth._id, auth.name, auth.lname, auth.number, auth.email, password);\n    }\n  };\n\n  if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"20px\",\n        background: \"#fff\",\n        borderRadius: \"10px\",\n        margin: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"large text-primary\",\n        children: \"Forgot Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"lead\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), \" Please enter a new password should be 8 characters in length.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: c => onSubmit(c),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            name: \"password\",\n            value: password,\n            onChange: c => onChange(c),\n            minLength: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Confirm Password\",\n            value: password2,\n            onChange: c => onChange(c),\n            name: \"password2\",\n            minLength: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          value: \"Change Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChangePassword, \"+UwdDDLRkVMV3lKqdkiLiRqUuj8=\");\n\n_c = ChangePassword;\nChangePassword.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  changepassword: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  auth: state.auth\n}); //Connect get two props the\n// 1. state that  you want to map.. e.g get state from other actions\n// 2. object you want to use from actions and its props\n\n\nexport default connect(mapStateToProps, {\n  forgot_password,\n  setAlert,\n  changepassword\n})(withRouter(ChangePassword));\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["D:/1App/client/src/components/auth/ChangePassword.js"],"names":["React","Fragment","useEffect","useState","Redirect","withRouter","connect","setAlert","changepassword","forgot_password","PropTypes","ChangePassword","auth","isAuthenticated","formData","setFormData","password","password2","email","onChange","c","target","name","value","onSubmit","preventDefault","_id","lname","number","padding","background","borderRadius","margin","propTypes","func","isRequired","bool","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\n//Connect the component to redux\r\n//See Export down end file\r\nimport { connect } from \"react-redux\";\r\n//Bring actions in the action folders\r\nimport { setAlert } from \"../../actions/alert\";\r\nimport { changepassword } from \"../../actions/sms\";\r\nimport { forgot_password } from \"../../actions/auth\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ChangePassword = ({\r\n  auth,\r\n  setAlert,\r\n  forgot_password,\r\n  changepassword,\r\n  isAuthenticated,\r\n}) => {\r\n  //formdata is the state, setFormData is the function use to update the state\r\n  //Use state hooks\r\n  const [formData, setFormData] = useState({\r\n    password: \"\",\r\n    password2: \"\",\r\n  });\r\n  let email = auth.email;\r\n\r\n  useEffect(() => {\r\n    forgot_password(email);\r\n  }, [email]);\r\n  //destructure so you would do formData.name formData.number\r\n  //Object Syntax use {}\r\n  const { password, password2 } = formData;\r\n\r\n  const onChange = async c =>\r\n    setFormData({ ...formData, [c.target.name]: c.target.value });\r\n\r\n  const onSubmit = async c => {\r\n    c.preventDefault();\r\n\r\n    if (password !== password2) {\r\n      setAlert(\"Passwords dont match\", \"danger\");\r\n    } else {\r\n      //register is the action from reducers\r\n      changepassword(\r\n        auth._id,\r\n        auth.name,\r\n        auth.lname,\r\n        auth.number,\r\n        auth.email,\r\n        password\r\n      );\r\n    }\r\n  };\r\n  if (isAuthenticated) {\r\n    return <Redirect to='/Login' />;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        style={{\r\n          padding: \"20px\",\r\n          background: \"#fff\",\r\n          borderRadius: \"10px\",\r\n          margin: \"1rem\",\r\n        }}\r\n      >\r\n        <h1 className='large text-primary'>Forgot Password</h1>\r\n        <p className='lead'>\r\n          <i className='fa fa-key'></i> Please enter a new password should be 8\r\n          characters in length.\r\n        </p>\r\n        <form className='form' onSubmit={c => onSubmit(c)}>\r\n          {/* <div style={{ display: \"none\" }}>\r\n            <input\r\n              type='text'\r\n              placeholder='First Name'\r\n              name='name'\r\n              //value is set value on state for onChange\r\n              value={name}\r\n              onChange={c => onChange(c)}\r\n              required\r\n            />\r\n          </div>\r\n          <div style={{ display: \"none\" }}>\r\n            <input\r\n              type='text'\r\n              placeholder='Last Name'\r\n              name='lname'\r\n              //value is set value on state for onChange\r\n              value={lname}\r\n              onChange={c => onChange(c)}\r\n              required\r\n            />\r\n          </div>\r\n          <div style={{ display: \"none\" }}>\r\n            <input\r\n              type='tel'\r\n              placeholder='09XX XXX XXXX'\r\n              name='number'\r\n              value={number}\r\n              onChange={c => onChange(c)}\r\n              required\r\n            />\r\n          </div>\r\n          <div style={{ display: \"none\" }}>\r\n            <input\r\n              type='email'\r\n              placeholder='Email Address'\r\n              name='email'\r\n              value={email}\r\n              onChange={c => onChange(c)}\r\n            />\r\n            <small className='form-text'></small>\r\n          </div> */}\r\n          <div className='form-group'>\r\n            <input\r\n              type='password'\r\n              placeholder='Password'\r\n              name='password'\r\n              value={password}\r\n              onChange={c => onChange(c)}\r\n              minLength='8'\r\n            />\r\n          </div>\r\n          <div className='form-group'>\r\n            <input\r\n              type='password'\r\n              placeholder='Confirm Password'\r\n              value={password2}\r\n              onChange={c => onChange(c)}\r\n              name='password2'\r\n              minLength='8'\r\n            />\r\n          </div>\r\n          <input\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            value='Change Password'\r\n          />\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nChangePassword.propTypes = {\r\n  setAlert: PropTypes.func.isRequired,\r\n  changepassword: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  auth: state.auth,\r\n});\r\n\r\n//Connect get two props the\r\n// 1. state that  you want to map.. e.g get state from other actions\r\n// 2. object you want to use from actions and its props\r\nexport default connect(mapStateToProps, {\r\n  forgot_password,\r\n  setAlert,\r\n  changepassword,\r\n})(withRouter(ChangePassword));\r\n"]},"metadata":{},"sourceType":"module"}