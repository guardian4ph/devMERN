{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\opcenProfile\\\\opcenprofile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment, useRef, useCallback } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Dropzone from \"react-dropzone\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createProfile } from \"../../actions/profile\";\nimport moment from \"moment\"; // Map\n\nimport Search from \"../../utils/searchMap\";\nimport Locate from \"../../utils/locateMap\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport MapStyles from \"../layout/MapStyles\";\nimport Moment from \"react-moment\";\nimport Geodcode from \"react-geocode\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: `350px`,\n  width: \"100%\"\n};\nconst center = {\n  lat: 10.3272994,\n  lng: 123.9431079\n};\nconst options = {\n  styles: MapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst opcenprofile = props => {\n  _s();\n\n  const [image, setImage] = useState(null); // state for storing actual image\n\n  const [previewSrc, setPreviewSrc] = useState(\"\"); // state for storing previewImage\n\n  const [marker, setMarker] = useState({\n    lat: 10.3272994,\n    lng: 123.9431079\n  });\n  const [com_address, setAddress] = useState({\n    currentaddress: \"\",\n    city: \"\",\n    area: \"\",\n    state: \"\"\n  });\n  const [formData, setFormData] = useState({\n    gender: \"\",\n    civilstatus: \"\",\n    birthday: \"\",\n    //Pulled in Map\n    completeaddress: \"\",\n    city: \"\",\n    area: \"\",\n    state: \"\",\n    lat: \"\",\n    lng: \"\",\n    organization: \"\",\n    profilepic: \"\",\n    // Work\n    website: \"\",\n    location: \"\",\n    bio: \"\",\n    status: \"\",\n    skills: \"\",\n    // Social Media\n    youtube: \"\",\n    facebook: \"\",\n    twitter: \"\",\n    instagram: \"\",\n    linkedin: \"\",\n    // Emergency Info\n    contactperson: \"\",\n    relationship: \"\",\n    contactnumber: \"\",\n    eaddress: \"\",\n    bloodtype: \"\",\n    build: \"\",\n    birthmark: \"\",\n    height: \"\",\n    weight: \"\",\n    insured: \"\"\n  }); // Toogle button to show a div\n\n  const [displayPersonalInputs, togglePersonalInputs] = useState(true);\n  const [displayOrganizationInputs, toggleOrganizationInputs] = useState(false);\n  const [displaySocialInputs, toggleSocialInputs] = useState(false);\n  const [displayEmergencyInputs, toggleEmergencyInputs] = useState(false);\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\n  //Map Declarations\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  Geodcode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n  const [selected, setSelected] = useState(null);\n\n  const getCity = addressArray => {\n    let city = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n        city = addressArray[index].long_name;\n        return city;\n      }\n    }\n  };\n\n  const getArea = addressArray => {\n    let area = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0]) {\n        for (let j = 0; j < addressArray.length; j++) {\n          if (\"sublocality_level_1\" === addressArray[index].types[j] || \"locality\" === addressArray[index].types[j]) {\n            area = addressArray[index].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n\n  const getState = addressArray => {\n    let state = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n          state = addressArray[index].long_name;\n          return state;\n        }\n      }\n    }\n  };\n\n  const onMapClick = useCallback(e => {\n    const latlng = {\n      lat: e.latLng.lat(),\n      lng: e.latLng.lng()\n    };\n    setMarker(latlng);\n    console.log(\"create profile onmapclick\", marker);\n    panTo(latlng);\n    Geodcode.fromLatLng(e.latLng.lat(), e.latLng.lng()).then(response => {\n      console.log(\"Response\", response);\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = getCity(addressArray),\n            state = getState(addressArray),\n            area = getArea(addressArray);\n      setAddress({\n        currentaddress: address ? address : \"\",\n        city: city ? city : \"\",\n        area: area ? area : \"\",\n        state: state ? city : \"\"\n      });\n    });\n  }, []);\n  const dropRef = useRef(); // React ref for managing the hover state of droppable area\n\n  const mapRef = useRef();\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n    console.log(\"MapRef load is \", map);\n    Geodcode.fromLatLng(map.center.lat(), map.center.lng()).then(response => {\n      console.log(\"Response\", response);\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = getCity(addressArray),\n            state = getState(addressArray),\n            area = getArea(addressArray);\n      setAddress({\n        currentaddress: address ? address : \"\",\n        city: city ? city : \"\",\n        area: area ? area : \"\",\n        state: state ? city : \"\"\n      });\n      setMarker({\n        lat: map.center.lat(),\n        lng: map.center.lng()\n      });\n    });\n  }, []);\n  const panTo = useCallback(({\n    lat,\n    lng\n  }) => {\n    setMarker({\n      lat,\n      lng\n    });\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(15);\n  }, []);\n  if (loadError) return \"Error Loading Map\";\n  if (!isLoaded) return \"Loading Map...\"; // if (com_address)\n\n  const {\n    // Personal\n    gender,\n    civilstatus,\n    birthday,\n    completeaddress,\n    city,\n    area,\n    state,\n    lat,\n    lng,\n    //Organization\n    organization,\n    website,\n    location,\n    bio,\n    status,\n    skills,\n    //Social\n    youtube,\n    facebook,\n    twitter,\n    instagram,\n    linkedin,\n    // Emergency Info\n    contactperson,\n    relationship,\n    contactnumber,\n    eaddress,\n    bloodtype,\n    insured\n  } = formData;\n\n  const onDrop = files => {\n    const [uploadedFile] = files;\n    setImage(uploadedFile);\n    console.log(\"drop image\", image);\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewSrc(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(uploadedFile);\n    setIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\n    dropRef.current.style.border = \"2px dashed #e9ebeb\";\n  };\n\n  const updateBorder = dragState => {\n    if (dragState === \"over\") {\n      dropRef.current.style.border = \"2px solid #000\";\n    } else if (dragState === \"leave\") {\n      dropRef.current.style.border = \"2px dashed #e9ebeb\";\n    }\n  };\n\n  const onChange = c => setFormData({ ...formData,\n    [c.target.name]: c.target.value\n  });\n\n  const profilePayload = image === null ? `Spotter.png` : image;\n  const payload = new FormData();\n  payload.append(\"gender\", formData.gender);\n  payload.append(\"civilstatus\", formData.civilstatus);\n  payload.append(\"birthday\", formData.birthday); // Map Pulled\n\n  payload.append(\"completeaddress\", com_address.currentaddress);\n  payload.append(\"city\", com_address.city);\n  payload.append(\"area\", com_address.area);\n  payload.append(\"state\", com_address.state);\n  payload.append(\"lat\", marker.lat);\n  payload.append(\"lng\", marker.lng); //Organization\n\n  payload.append(\"organization\", formData.organization);\n  payload.append(\"website\", formData.website);\n  payload.append(\"location\", formData.location);\n  payload.append(\"status\", formData.status);\n  payload.append(\"skills\", formData.skills);\n  payload.append(\"bio\", formData.bio); //Social\n\n  payload.append(\"youtube\", formData.youtube);\n  payload.append(\"twitter\", formData.twitter);\n  payload.append(\"facebook\", formData.facebook);\n  payload.append(\"linkedin\", formData.linkedin);\n  payload.append(\"instagram\", formData.instagram);\n  payload.append(\"profilepic\", profilePayload); // Emergency Info\n\n  payload.append(\"contactperson\", formData.contactperson);\n  payload.append(\"relationship\", formData.relationship);\n  payload.append(\"contactnumber\", formData.contactnumber);\n  payload.append(\"eaddress\", formData.eaddress);\n  payload.append(\"bloodtype\", formData.bloodtype);\n  payload.append(\"insured\", formData.insured);\n\n  const onSubmit = async c => {\n    c.preventDefault();\n    createProfile(payload, history);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 10\n  }, this);\n};\n\n_s(opcenprofile, \"lJLe02ElIE/a1dyJ+A/46d0il04=\", false, function () {\n  return [useLoadScript];\n});\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(opcenprofile);","map":{"version":3,"sources":["D:/1App/client/src/components/opcenProfile/opcenprofile.js"],"names":["React","useState","Fragment","useRef","useCallback","Link","withRouter","Dropzone","PropTypes","connect","createProfile","moment","Search","Locate","GoogleMap","useLoadScript","Marker","InfoWindow","MapStyles","Moment","Geodcode","libraries","mapContainerStyle","height","width","center","lat","lng","options","styles","disableDefaultUI","zoomControl","opcenprofile","props","image","setImage","previewSrc","setPreviewSrc","marker","setMarker","com_address","setAddress","currentaddress","city","area","state","formData","setFormData","gender","civilstatus","birthday","completeaddress","organization","profilepic","website","location","bio","status","skills","youtube","facebook","twitter","instagram","linkedin","contactperson","relationship","contactnumber","eaddress","bloodtype","build","birthmark","weight","insured","displayPersonalInputs","togglePersonalInputs","displayOrganizationInputs","toggleOrganizationInputs","displaySocialInputs","toggleSocialInputs","displayEmergencyInputs","toggleEmergencyInputs","isPreviewAvailable","setIsPreviewAvailable","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","setApiKey","selected","setSelected","getCity","addressArray","index","length","types","long_name","getArea","j","getState","onMapClick","e","latlng","latLng","console","log","panTo","fromLatLng","then","response","address","results","formatted_address","address_components","dropRef","mapRef","onMapLoad","map","current","setZoom","onDrop","files","uploadedFile","fileReader","FileReader","onload","result","readAsDataURL","name","match","style","border","updateBorder","dragState","onChange","c","target","value","profilePayload","payload","FormData","append","onSubmit","preventDefault","history","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, Fragment, useRef, useCallback } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createProfile } from \"../../actions/profile\";\r\nimport moment from \"moment\";\r\n// Map\r\nimport Search from \"../../utils/searchMap\";\r\nimport Locate from \"../../utils/locateMap\";\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\nimport MapStyles from \"../layout/MapStyles\";\r\nimport Moment from \"react-moment\";\r\nimport Geodcode from \"react-geocode\";\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst mapContainerStyle = {\r\n  height: `350px`,\r\n  width: \"100%\",\r\n};\r\n\r\nconst center = {\r\n  lat: 10.3272994,\r\n  lng: 123.9431079,\r\n};\r\nconst options = {\r\n  styles: MapStyles,\r\n  disableDefaultUI: true,\r\n  zoomControl: true,\r\n};\r\nconst opcenprofile = props => {\r\n  const [image, setImage] = useState(null); // state for storing actual image\r\n  const [previewSrc, setPreviewSrc] = useState(\"\"); // state for storing previewImage\r\n  const [marker, setMarker] = useState({ lat: 10.3272994, lng: 123.9431079 });\r\n  const [com_address, setAddress] = useState({\r\n    currentaddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n  });\r\n\r\n  const [formData, setFormData] = useState({\r\n    gender: \"\",\r\n    civilstatus: \"\",\r\n    birthday: \"\",\r\n    //Pulled in Map\r\n    completeaddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n    lat: \"\",\r\n    lng: \"\",\r\n    organization: \"\",\r\n    profilepic: \"\",\r\n\r\n    // Work\r\n    website: \"\",\r\n    location: \"\",\r\n    bio: \"\",\r\n    status: \"\",\r\n    skills: \"\",\r\n    // Social Media\r\n    youtube: \"\",\r\n    facebook: \"\",\r\n    twitter: \"\",\r\n    instagram: \"\",\r\n    linkedin: \"\",\r\n    // Emergency Info\r\n    contactperson: \"\",\r\n    relationship: \"\",\r\n    contactnumber: \"\",\r\n    eaddress: \"\",\r\n    bloodtype: \"\",\r\n    build: \"\",\r\n    birthmark: \"\",\r\n    height: \"\",\r\n    weight: \"\",\r\n    insured: \"\",\r\n  });\r\n  // Toogle button to show a div\r\n  const [displayPersonalInputs, togglePersonalInputs] = useState(true);\r\n  const [displayOrganizationInputs, toggleOrganizationInputs] = useState(false);\r\n  const [displaySocialInputs, toggleSocialInputs] = useState(false);\r\n  const [displayEmergencyInputs, toggleEmergencyInputs] = useState(false);\r\n\r\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\r\n\r\n  //Map Declarations\r\n\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries,\r\n  });\r\n\r\n  Geodcode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\r\n\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  const getCity = addressArray => {\r\n    let city = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (\r\n        addressArray[index].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[index].types[0]\r\n      ) {\r\n        city = addressArray[index].long_name;\r\n        return city;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getArea = addressArray => {\r\n    let area = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (addressArray[index].types[0]) {\r\n        for (let j = 0; j < addressArray.length; j++) {\r\n          if (\r\n            \"sublocality_level_1\" === addressArray[index].types[j] ||\r\n            \"locality\" === addressArray[index].types[j]\r\n          ) {\r\n            area = addressArray[index].long_name;\r\n            return area;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getState = addressArray => {\r\n    let state = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      for (let index = 0; index < addressArray.length; index++) {\r\n        if (\r\n          addressArray[index].types[0] &&\r\n          \"administrative_area_level_2\" === addressArray[index].types[0]\r\n        ) {\r\n          state = addressArray[index].long_name;\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onMapClick = useCallback(e => {\r\n    const latlng = { lat: e.latLng.lat(), lng: e.latLng.lng() };\r\n    setMarker(latlng);\r\n    console.log(\"create profile onmapclick\", marker);\r\n    panTo(latlng);\r\n\r\n    Geodcode.fromLatLng(e.latLng.lat(), e.latLng.lng()).then(response => {\r\n      console.log(\"Response\", response);\r\n      const address = response.results[0].formatted_address,\r\n        addressArray = response.results[0].address_components,\r\n        city = getCity(addressArray),\r\n        state = getState(addressArray),\r\n        area = getArea(addressArray);\r\n\r\n      setAddress({\r\n        currentaddress: address ? address : \"\",\r\n        city: city ? city : \"\",\r\n        area: area ? area : \"\",\r\n        state: state ? city : \"\",\r\n      });\r\n    });\r\n  }, []);\r\n  const dropRef = useRef(); // React ref for managing the hover state of droppable area\r\n  const mapRef = useRef();\r\n\r\n  const onMapLoad = useCallback(map => {\r\n    mapRef.current = map;\r\n    console.log(\"MapRef load is \", map);\r\n    Geodcode.fromLatLng(map.center.lat(), map.center.lng()).then(response => {\r\n      console.log(\"Response\", response);\r\n      const address = response.results[0].formatted_address,\r\n        addressArray = response.results[0].address_components,\r\n        city = getCity(addressArray),\r\n        state = getState(addressArray),\r\n        area = getArea(addressArray);\r\n\r\n      setAddress({\r\n        currentaddress: address ? address : \"\",\r\n        city: city ? city : \"\",\r\n        area: area ? area : \"\",\r\n        state: state ? city : \"\",\r\n      });\r\n      setMarker({ lat: map.center.lat(), lng: map.center.lng() });\r\n    });\r\n  }, []);\r\n\r\n  const panTo = useCallback(({ lat, lng }) => {\r\n    setMarker({ lat, lng });\r\n    mapRef.current.panTo({ lat, lng });\r\n    mapRef.current.setZoom(15);\r\n  }, []);\r\n\r\n  if (loadError) return \"Error Loading Map\";\r\n  if (!isLoaded) return \"Loading Map...\";\r\n  // if (com_address)\r\n\r\n  const {\r\n    // Personal\r\n    gender,\r\n    civilstatus,\r\n    birthday,\r\n    completeaddress,\r\n    city,\r\n    area,\r\n    state,\r\n    lat,\r\n    lng,\r\n\r\n    //Organization\r\n    organization,\r\n    website,\r\n    location,\r\n    bio,\r\n    status,\r\n    skills,\r\n    //Social\r\n    youtube,\r\n    facebook,\r\n    twitter,\r\n    instagram,\r\n    linkedin,\r\n    // Emergency Info\r\n    contactperson,\r\n    relationship,\r\n    contactnumber,\r\n    eaddress,\r\n    bloodtype,\r\n    insured,\r\n  } = formData;\r\n\r\n  const onDrop = files => {\r\n    const [uploadedFile] = files;\r\n    setImage(uploadedFile);\r\n    console.log(\"drop image\", image);\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewSrc(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(uploadedFile);\r\n    setIsPreviewAvailable(uploadedFile.name.match(/\\.(jpeg|jpg|png)$/));\r\n    dropRef.current.style.border = \"2px dashed #e9ebeb\";\r\n  };\r\n\r\n  const updateBorder = dragState => {\r\n    if (dragState === \"over\") {\r\n      dropRef.current.style.border = \"2px solid #000\";\r\n    } else if (dragState === \"leave\") {\r\n      dropRef.current.style.border = \"2px dashed #e9ebeb\";\r\n    }\r\n  };\r\n\r\n  const onChange = c =>\r\n    setFormData({ ...formData, [c.target.name]: c.target.value });\r\n\r\n  const profilePayload = image === null ? `Spotter.png` : image;\r\n\r\n  const payload = new FormData();\r\n  payload.append(\"gender\", formData.gender);\r\n  payload.append(\"civilstatus\", formData.civilstatus);\r\n  payload.append(\"birthday\", formData.birthday);\r\n  // Map Pulled\r\n  payload.append(\"completeaddress\", com_address.currentaddress);\r\n  payload.append(\"city\", com_address.city);\r\n  payload.append(\"area\", com_address.area);\r\n  payload.append(\"state\", com_address.state);\r\n  payload.append(\"lat\", marker.lat);\r\n  payload.append(\"lng\", marker.lng);\r\n\r\n  //Organization\r\n  payload.append(\"organization\", formData.organization);\r\n  payload.append(\"website\", formData.website);\r\n  payload.append(\"location\", formData.location);\r\n  payload.append(\"status\", formData.status);\r\n  payload.append(\"skills\", formData.skills);\r\n  payload.append(\"bio\", formData.bio);\r\n  //Social\r\n  payload.append(\"youtube\", formData.youtube);\r\n  payload.append(\"twitter\", formData.twitter);\r\n  payload.append(\"facebook\", formData.facebook);\r\n  payload.append(\"linkedin\", formData.linkedin);\r\n  payload.append(\"instagram\", formData.instagram);\r\n  payload.append(\"profilepic\", profilePayload);\r\n\r\n  // Emergency Info\r\n\r\n  payload.append(\"contactperson\", formData.contactperson);\r\n  payload.append(\"relationship\", formData.relationship);\r\n  payload.append(\"contactnumber\", formData.contactnumber);\r\n  payload.append(\"eaddress\", formData.eaddress);\r\n  payload.append(\"bloodtype\", formData.bloodtype);\r\n  payload.append(\"insured\", formData.insured);\r\n\r\n  const onSubmit = async c => {\r\n    c.preventDefault();\r\n    createProfile(payload, history);\r\n  };\r\n  return <div>test</div>;\r\n};\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(opcenprofile);\r\n"]},"metadata":{},"sourceType":"module"}