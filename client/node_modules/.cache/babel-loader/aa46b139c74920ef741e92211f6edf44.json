{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\posts\\\\Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport { getPosts } from \"../../actions/post\";\nimport PostItem from \"./PostItem\";\nimport PostForm from \"./PostForm\";\nimport { getProfiles } from \"../../actions/profile\";\nimport EmergencyBtn from \"../layout/EmergencyBtn\";\nimport IncidentModal from \"../layout/IncidentModal\";\n\nconst Posts = ({\n  getProfiles,\n  getPosts,\n  post: {\n    posts,\n    loading\n  }\n}) => {\n  _s();\n\n  useEffect(() => {\n    getProfiles();\n    getPosts();\n  }, [getPosts, getProfiles]);\n\n  if (isAuthenticated && isOpcenAdmin) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/operation-center\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  const [show, setShow] = useState(false);\n  return loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#fff\",\n        borderRadius: \"10px\",\n        paddingTop: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emergencybtn\",\n        onClick: () => setShow(true),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/icons/incident/Button.png\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IncidentModal, {\n        onClose: () => setShow(false),\n        show: show\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posts\",\n          children: /*#__PURE__*/_jsxDEV(PostItem, {\n            post: post\n          }, post._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"CPucc9m2hZmzuzaESty3lnmA4tA=\");\n\n_c = Posts;\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired,\n  isOpcenAdmin: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post,\n  profile: state.profile,\n  isOpcenAdmin: state.auth.isOpcenAdmin\n});\n\nexport default connect(mapStateToProps, {\n  getPosts,\n  getProfiles\n})(Posts);\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["D:/1App/client/src/components/posts/Posts.js"],"names":["React","Fragment","useEffect","useState","PropTypes","connect","Spinner","getPosts","PostItem","PostForm","getProfiles","EmergencyBtn","IncidentModal","Posts","post","posts","loading","isAuthenticated","isOpcenAdmin","show","setShow","background","borderRadius","paddingTop","map","_id","propTypes","func","isRequired","object","profile","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport { getPosts } from \"../../actions/post\";\r\nimport PostItem from \"./PostItem\";\r\nimport PostForm from \"./PostForm\";\r\nimport { getProfiles } from \"../../actions/profile\";\r\nimport EmergencyBtn from \"../layout/EmergencyBtn\";\r\nimport IncidentModal from \"../layout/IncidentModal\";\r\n\r\nconst Posts = ({ getProfiles, getPosts, post: { posts, loading } }) => {\r\n  useEffect(() => {\r\n    getProfiles();\r\n    getPosts();\r\n  }, [getPosts, getProfiles]);\r\n\r\n  if (isAuthenticated && isOpcenAdmin) {\r\n    return <Redirect to='/operation-center' />;\r\n  }\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  return loading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <Fragment>\r\n      <div\r\n        style={{ background: \"#fff\", borderRadius: \"10px\", paddingTop: \"10px\" }}\r\n      >\r\n        <PostForm />\r\n        {/* Emergecny button */}\r\n        <div className='emergencybtn' onClick={() => setShow(true)}>\r\n          <img src='/icons/incident/Button.png' alt='' />\r\n        </div>\r\n        <IncidentModal onClose={() => setShow(false)} show={show} />\r\n        {/* <EmergencyBtn /> */}\r\n        <div>\r\n          {posts.map(post => (\r\n            <div className='posts'>\r\n              <PostItem key={post._id} post={post} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nPosts.propTypes = {\r\n  getPosts: PropTypes.func.isRequired,\r\n  post: PropTypes.object.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n  isOpcenAdmin: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  post: state.post,\r\n  profile: state.profile,\r\n  isOpcenAdmin: state.auth.isOpcenAdmin,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getPosts, getProfiles })(Posts);\r\n"]},"metadata":{},"sourceType":"module"}