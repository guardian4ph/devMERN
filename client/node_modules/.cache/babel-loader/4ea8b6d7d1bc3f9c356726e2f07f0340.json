{"ast":null,"code":"if (\"serviceWorker\" in navigator) {\n  send().catch(err => console.error(err));\n} // Register SW, Register Push, Send Push\n\n\nexport async function send() {\n  // Register Service Worker\n  console.log(\"registering service worker...\");\n  const register = await navigator.serviceWorker.register(\"/ws.js\", {\n    scope: \"/\"\n  });\n  console.log(\"Service Worker Registered\"); //   Register Push\n\n  console.log(\"Register Push...\");\n  const subscription = await register.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(REACT_APP_PUBLIC_VAPID_KEY)\n  });\n  console.log(\"Push Registered...\"); //   Send Push Notification\n\n  console.log(\"Sending Push...\");\n  await fetch(\"/subscribe\", {\n    method: \"POST\",\n    body: JSON.stringify(subscription),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n  console.log(\"Push Notification Sent \");\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\")\n  /* eslint-disable-line */\n  .replace(/_/g, \"/\");\n  /* eslint-disable-line */\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n} // export async function send(\n//   title = \"GUARDIAN NOTIFICATION\",\n//   body = \"Incident Alert\"\n// ) {\n//   console.log(\"Hit by Frontend\");\n//   const register = await navigator.serviceWorker.register(\"/ws.js\", {\n//     scope: \"/\",\n//   });\n//   console.log(\"Service worker Registering...\");\n//   if (\"serviceWorker\" in navigator) {\n//     navigator.serviceWorker.ready\n//       .then(function (registration) {\n//         if (!registration.pushManager) {\n//           return;\n//         }\n//         registration.pushManager\n//           .getSubscription()\n//           .then(function (existedSubscription) {\n//             if (existedSubscription === null) {\n//               registration.pushManager\n//                 .subscribe({\n//                   applicationServerKey: urlBase64ToUint8Array(\n//                     process.env.REACT_APP_PUBLIC_VAPID_KEY\n//                   ),\n//                   userVisibleOnly: true,\n//                 })\n//                 .then(function (newSubscription) {\n//                   sendSubscription(newSubscription, title, body);\n//                 })\n//                 .catch(function (e) {\n//                   if (Notification.permission !== \"granted\") {\n//                   } else {\n//                     console.error(e);\n//                   }\n//                 });\n//             } else {\n//               sendSubscription(existedSubscription, title, body);\n//             }\n//           });\n//       })\n//       .catch(function (e) {\n//         console.error(e);\n//       });\n//   }\n// }\n\n\nfunction sendSubscription(subscription, title, body) {\n  return fetch(\"/subscribe\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      subscription,\n      title,\n      body\n    }),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n}","map":{"version":3,"sources":["D:/1App/client/src/utils/push.js"],"names":["navigator","send","catch","err","console","error","log","register","serviceWorker","scope","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","urlBase64ToUint8Array","REACT_APP_PUBLIC_VAPID_KEY","fetch","method","body","JSON","stringify","headers","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","sendSubscription","title"],"mappings":"AAAA,IAAI,mBAAmBA,SAAvB,EAAkC;AAChCC,EAAAA,IAAI,GAAGC,KAAP,CAAaC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAApB;AACD,C,CACD;;;AAEA,OAAO,eAAeF,IAAf,GAAsB;AAC3B;AACAG,EAAAA,OAAO,CAACE,GAAR,CAAY,+BAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACQ,aAAV,CAAwBD,QAAxB,CAAiC,QAAjC,EAA2C;AAChEE,IAAAA,KAAK,EAAE;AADyD,GAA3C,CAAvB;AAGAL,EAAAA,OAAO,CAACE,GAAR,CAAY,2BAAZ,EAN2B,CAO3B;;AAEAF,EAAAA,OAAO,CAACE,GAAR,CAAY,kBAAZ;AACA,QAAMI,YAAY,GAAG,MAAMH,QAAQ,CAACI,WAAT,CAAqBC,SAArB,CAA+B;AACxDC,IAAAA,eAAe,EAAE,IADuC;AAExDC,IAAAA,oBAAoB,EAAEC,qBAAqB,CAACC,0BAAD;AAFa,GAA/B,CAA3B;AAKAZ,EAAAA,OAAO,CAACE,GAAR,CAAY,oBAAZ,EAf2B,CAiB3B;;AAEAF,EAAAA,OAAO,CAACE,GAAR,CAAY,iBAAZ;AACA,QAAMW,KAAK,CAAC,YAAD,EAAe;AACxBC,IAAAA,MAAM,EAAE,MADgB;AAExBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,YAAf,CAFkB;AAGxBY,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHe,GAAf,CAAX;AAOAlB,EAAAA,OAAO,CAACE,GAAR,CAAY,yBAAZ;AACD;;AAED,SAASS,qBAAT,CAA+BQ,YAA/B,EAA6C;AAC3C,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,CAAC,IAAKF,YAAY,CAACG,MAAb,GAAsB,CAA5B,IAAkC,CAA7C,CAAhB;AACA,QAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAhB,EACZI,OADY,CACJ,KADI,EACG,GADH;AACQ;AADR,GAEZA,OAFY,CAEJ,IAFI,EAEE,GAFF,CAAf;AAEuB;;AAEvB,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB;AACA,QAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeJ,OAAO,CAACH,MAAvB,CAApB;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACH,MAA5B,EAAoC,EAAEQ,CAAtC,EAAyC;AACvCF,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBL,OAAO,CAACM,UAAR,CAAmBD,CAAnB,CAAjB;AACD;;AACD,SAAOF,WAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASI,gBAAT,CAA0B1B,YAA1B,EAAwC2B,KAAxC,EAA+ClB,IAA/C,EAAqD;AACnD,SAAOF,KAAK,CAAC,YAAD,EAAe;AACzBC,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEX,MAAAA,YAAF;AAAgB2B,MAAAA,KAAhB;AAAuBlB,MAAAA;AAAvB,KAAf,CAFmB;AAGzBG,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHgB,GAAf,CAAZ;AAOD","sourcesContent":["if (\"serviceWorker\" in navigator) {\r\n  send().catch(err => console.error(err));\r\n}\r\n// Register SW, Register Push, Send Push\r\n\r\nexport async function send() {\r\n  // Register Service Worker\r\n  console.log(\"registering service worker...\");\r\n  const register = await navigator.serviceWorker.register(\"/ws.js\", {\r\n    scope: \"/\",\r\n  });\r\n  console.log(\"Service Worker Registered\");\r\n  //   Register Push\r\n\r\n  console.log(\"Register Push...\");\r\n  const subscription = await register.pushManager.subscribe({\r\n    userVisibleOnly: true,\r\n    applicationServerKey: urlBase64ToUint8Array(REACT_APP_PUBLIC_VAPID_KEY),\r\n  });\r\n\r\n  console.log(\"Push Registered...\");\r\n\r\n  //   Send Push Notification\r\n\r\n  console.log(\"Sending Push...\");\r\n  await fetch(\"/subscribe\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(subscription),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n  console.log(\"Push Notification Sent \");\r\n}\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = (base64String + padding)\r\n    .replace(/\\-/g, \"+\") /* eslint-disable-line */\r\n    .replace(/_/g, \"/\"); /* eslint-disable-line */\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\n// export async function send(\r\n//   title = \"GUARDIAN NOTIFICATION\",\r\n//   body = \"Incident Alert\"\r\n// ) {\r\n//   console.log(\"Hit by Frontend\");\r\n//   const register = await navigator.serviceWorker.register(\"/ws.js\", {\r\n//     scope: \"/\",\r\n//   });\r\n//   console.log(\"Service worker Registering...\");\r\n//   if (\"serviceWorker\" in navigator) {\r\n//     navigator.serviceWorker.ready\r\n//       .then(function (registration) {\r\n//         if (!registration.pushManager) {\r\n//           return;\r\n//         }\r\n//         registration.pushManager\r\n//           .getSubscription()\r\n//           .then(function (existedSubscription) {\r\n//             if (existedSubscription === null) {\r\n//               registration.pushManager\r\n//                 .subscribe({\r\n//                   applicationServerKey: urlBase64ToUint8Array(\r\n//                     process.env.REACT_APP_PUBLIC_VAPID_KEY\r\n//                   ),\r\n//                   userVisibleOnly: true,\r\n//                 })\r\n//                 .then(function (newSubscription) {\r\n//                   sendSubscription(newSubscription, title, body);\r\n//                 })\r\n//                 .catch(function (e) {\r\n//                   if (Notification.permission !== \"granted\") {\r\n//                   } else {\r\n//                     console.error(e);\r\n//                   }\r\n//                 });\r\n//             } else {\r\n//               sendSubscription(existedSubscription, title, body);\r\n//             }\r\n//           });\r\n//       })\r\n//       .catch(function (e) {\r\n//         console.error(e);\r\n//       });\r\n//   }\r\n// }\r\n\r\nfunction sendSubscription(subscription, title, body) {\r\n  return fetch(\"/subscribe\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ subscription, title, body }),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}