{"ast":null,"code":"import { GET_POSTS, GET_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT, GET_POST_IMAGE } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n}; // eslint-disable-next-line\n\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        //from the action file\n        loading: false\n      };\n\n    case GET_POST:\n    case GET_POST_IMAGE:\n      return { ...state,\n        post: payload,\n        //from the action file\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n    case POST_IMG_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        //update the likes buy post ID\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.posts,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/1App/client/src/reducers/post.js"],"names":["GET_POSTS","GET_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","ADD_COMMENT","REMOVE_COMMENT","GET_POST_IMAGE","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","POST_IMG_ERROR","map","id","likes","comments","comment"],"mappings":"AAAA,SACEA,SADF,EAEEC,QAFF,EAGEC,UAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,cARF,EASEC,cATF,QAUO,kBAVP;AAYA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB,C,CAMA;;AACA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAKhB,SAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELJ,QAAAA,KAAK,EAAEO,OAFF;AAEW;AAChBL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKX,QAAL;AACA,SAAKO,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,IAAI,EAAEM,OAFD;AAEU;AACfL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKP,QAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAFF;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAFF;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKV,UAAL;AACA,SAAKkB,cAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELD,QAAAA,KAAK,EAAEI,OAFF;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKT,YAAL;AACE,aAAO,EACL,GAAGW,KADE;AAEL;AACAJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYW,GAAZ,CAAgBV,IAAI,IACzBA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACK,EAArB,GAA0B,EAAE,GAAGX,IAAL;AAAWY,UAAAA,KAAK,EAAEN,OAAO,CAACM;AAA1B,SAA1B,GAA8DZ,IADzD,CAHF;AAMLC,QAAAA,OAAO,EAAE;AANJ,OAAP;;AAQF,SAAKN,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,IAAI,EAAE,EAAE,GAAGG,KAAK,CAACH,IAAX;AAAiBa,UAAAA,QAAQ,EAAEP;AAA3B,SAFD;AAGLL,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKL,cAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,IAAI,EAAE,EACJ,GAAGG,KAAK,CAACJ,KADL;AAEJc,UAAAA,QAAQ,EAAEV,KAAK,CAACH,IAAN,CAAWa,QAAX,CAAoBN,MAApB,CACRO,OAAO,IAAIA,OAAO,CAACN,GAAR,KAAgBF,OADnB;AAFN,SAFD;AAQLL,QAAAA,OAAO,EAAE;AARJ,OAAP;;AAUF;AACE,aAAOE,KAAP;AA5DJ;AA8DD","sourcesContent":["import {\r\n  GET_POSTS,\r\n  GET_POST,\r\n  POST_ERROR,\r\n  UPDATE_LIKES,\r\n  DELETE_POST,\r\n  ADD_POST,\r\n  ADD_COMMENT,\r\n  REMOVE_COMMENT,\r\n  GET_POST_IMAGE,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  post: null,\r\n  loading: true,\r\n  error: {},\r\n};\r\n// eslint-disable-next-line\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_POSTS:\r\n      return {\r\n        ...state,\r\n        posts: payload, //from the action file\r\n        loading: false,\r\n      };\r\n    case GET_POST:\r\n    case GET_POST_IMAGE:\r\n      return {\r\n        ...state,\r\n        post: payload, //from the action file\r\n        loading: false,\r\n      };\r\n    case ADD_POST:\r\n      return {\r\n        ...state,\r\n        posts: [payload, ...state.posts],\r\n        loading: false,\r\n      };\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(post => post._id !== payload),\r\n        loading: false,\r\n      };\r\n    case POST_ERROR:\r\n    case POST_IMG_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false,\r\n      };\r\n    case UPDATE_LIKES:\r\n      return {\r\n        ...state,\r\n        //update the likes buy post ID\r\n        posts: state.posts.map(post =>\r\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\r\n        ),\r\n        loading: false,\r\n      };\r\n    case ADD_COMMENT:\r\n      return {\r\n        ...state,\r\n        post: { ...state.post, comments: payload },\r\n        loading: false,\r\n      };\r\n    case REMOVE_COMMENT:\r\n      return {\r\n        ...state,\r\n        post: {\r\n          ...state.posts,\r\n          comments: state.post.comments.filter(\r\n            comment => comment._id !== payload\r\n          ),\r\n        },\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}