{"ast":null,"code":"function urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding). // eslint-disable-next-line\n  replace(/\\-/g, \"+\") // eslint-disable-next-line\n  .replace(/_/g, \"/\"); // eslint-disable-next-line\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nexport async function send(title = \"Push Sent\", message = \"Hello push\") {\n  const register = await navigator.serviceWorker.register(\"/sw.js\", {\n    scope: \"/\"\n  });\n\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      if (!registration.pushManager) {\n        return;\n      }\n\n      registration.pushManager.getSubscription().then(function (existedSubscription) {\n        if (existedSubscription === null) {\n          registration.pushManager.subscribe({\n            applicationServerKey: urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY),\n            userVisibleOnly: true\n          }).then(function (newSubscription) {\n            sendSubscription(newSubscription, title, message);\n          }).catch(function (e) {\n            if (Notification.permission !== \"granted\") {} else {\n              console.error(e);\n            }\n          });\n        } else {\n          sendSubscription(existedSubscription, title, message);\n        }\n      });\n    }).catch(function (e) {\n      console.error(e);\n    });\n  }\n}\n\nfunction sendSubscription(subscription, title, message) {\n  return fetch(\"/api/subscribe\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      subscription,\n      title,\n      message\n    }),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n}","map":{"version":3,"sources":["D:/1App/client/src/utils/push.js"],"names":["urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","send","title","message","register","navigator","serviceWorker","scope","ready","then","registration","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","process","env","REACT_APP_PUBLIC_VAPID_KEY","userVisibleOnly","newSubscription","sendSubscription","catch","e","Notification","permission","console","error","subscription","fetch","method","body","JSON","stringify","headers"],"mappings":"AAAA,SAASA,qBAAT,CAA+BC,YAA/B,EAA6C;AAC3C,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,CAAC,IAAKF,YAAY,CAACG,MAAb,GAAsB,CAA5B,IAAkC,CAA7C,CAAhB;AACA,QAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAhB,GACb;AACCI,EAAAA,OAFY,CAEJ,KAFI,EAEG,GAFH,EAEQ;AAFR,GAGZA,OAHY,CAGJ,IAHI,EAGE,GAHF,CAAf,CAF2C,CAKpB;;AAEvB,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAhB;AACA,QAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeJ,OAAO,CAACH,MAAvB,CAApB;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACH,MAA5B,EAAoC,EAAEQ,CAAtC,EAAyC;AACvCF,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiBL,OAAO,CAACM,UAAR,CAAmBD,CAAnB,CAAjB;AACD;;AACD,SAAOF,WAAP;AACD;;AAED,OAAO,eAAeI,IAAf,CAAoBC,KAAK,GAAG,WAA5B,EAAyCC,OAAO,GAAG,YAAnD,EAAiE;AACtE,QAAMC,QAAQ,GAAG,MAAMC,SAAS,CAACC,aAAV,CAAwBF,QAAxB,CAAiC,QAAjC,EAA2C;AAChEG,IAAAA,KAAK,EAAE;AADyD,GAA3C,CAAvB;;AAIA,MAAI,mBAAmBF,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACC,aAAV,CAAwBE,KAAxB,CACGC,IADH,CACQ,UAAUC,YAAV,EAAwB;AAC5B,UAAI,CAACA,YAAY,CAACC,WAAlB,EAA+B;AAC7B;AACD;;AAEDD,MAAAA,YAAY,CAACC,WAAb,CACGC,eADH,GAEGH,IAFH,CAEQ,UAAUI,mBAAV,EAA+B;AACnC,YAAIA,mBAAmB,KAAK,IAA5B,EAAkC;AAChCH,UAAAA,YAAY,CAACC,WAAb,CACGG,SADH,CACa;AACTC,YAAAA,oBAAoB,EAAE5B,qBAAqB,CACzC6B,OAAO,CAACC,GAAR,CAAYC,0BAD6B,CADlC;AAITC,YAAAA,eAAe,EAAE;AAJR,WADb,EAOGV,IAPH,CAOQ,UAAUW,eAAV,EAA2B;AAC/BC,YAAAA,gBAAgB,CAACD,eAAD,EAAkBlB,KAAlB,EAAyBC,OAAzB,CAAhB;AACD,WATH,EAUGmB,KAVH,CAUS,UAAUC,CAAV,EAAa;AAClB,gBAAIC,YAAY,CAACC,UAAb,KAA4B,SAAhC,EAA2C,CAC1C,CADD,MACO;AACLC,cAAAA,OAAO,CAACC,KAAR,CAAcJ,CAAd;AACD;AACF,WAfH;AAgBD,SAjBD,MAiBO;AACLF,UAAAA,gBAAgB,CAACR,mBAAD,EAAsBX,KAAtB,EAA6BC,OAA7B,CAAhB;AACD;AACF,OAvBH;AAwBD,KA9BH,EA+BGmB,KA/BH,CA+BS,UAAUC,CAAV,EAAa;AAClBG,MAAAA,OAAO,CAACC,KAAR,CAAcJ,CAAd;AACD,KAjCH;AAkCD;AACF;;AAED,SAASF,gBAAT,CAA0BO,YAA1B,EAAwC1B,KAAxC,EAA+CC,OAA/C,EAAwD;AACtD,SAAO0B,KAAK,CAAC,gBAAD,EAAmB;AAC7BC,IAAAA,MAAM,EAAE,MADqB;AAE7BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA,YAAF;AAAgB1B,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB,KAAf,CAFuB;AAG7B+B,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHoB,GAAnB,CAAZ;AAOD","sourcesContent":["function urlBase64ToUint8Array(base64String) {\r\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = (base64String + padding)\r\n    // eslint-disable-next-line\r\n    .replace(/\\-/g, \"+\") // eslint-disable-next-line\r\n    .replace(/_/g, \"/\"); // eslint-disable-next-line\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\nexport async function send(title = \"Push Sent\", message = \"Hello push\") {\r\n  const register = await navigator.serviceWorker.register(\"/sw.js\", {\r\n    scope: \"/\",\r\n  });\r\n\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(function (registration) {\r\n        if (!registration.pushManager) {\r\n          return;\r\n        }\r\n\r\n        registration.pushManager\r\n          .getSubscription()\r\n          .then(function (existedSubscription) {\r\n            if (existedSubscription === null) {\r\n              registration.pushManager\r\n                .subscribe({\r\n                  applicationServerKey: urlBase64ToUint8Array(\r\n                    process.env.REACT_APP_PUBLIC_VAPID_KEY\r\n                  ),\r\n                  userVisibleOnly: true,\r\n                })\r\n                .then(function (newSubscription) {\r\n                  sendSubscription(newSubscription, title, message);\r\n                })\r\n                .catch(function (e) {\r\n                  if (Notification.permission !== \"granted\") {\r\n                  } else {\r\n                    console.error(e);\r\n                  }\r\n                });\r\n            } else {\r\n              sendSubscription(existedSubscription, title, message);\r\n            }\r\n          });\r\n      })\r\n      .catch(function (e) {\r\n        console.error(e);\r\n      });\r\n  }\r\n}\r\n\r\nfunction sendSubscription(subscription, title, message) {\r\n  return fetch(\"/api/subscribe\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({ subscription, title, message }),\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}