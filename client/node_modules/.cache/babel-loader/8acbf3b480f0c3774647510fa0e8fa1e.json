{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\utils\\\\locateMap.js\";\nimport { response } from \"express\";\nimport React from \"react\";\nimport Geodcode from \"react-geocode\";\n\nconst getCity = addressArray => {\n  let city = \"\";\n\n  for (let index = 0; index < addressArray.length; index++) {\n    if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n      city = addressArray[index].long_name;\n      return city;\n    }\n  }\n};\n\nconst getArea = addressArray => {\n  let area = \"\";\n\n  for (let index = 0; index < addressArray.length; index++) {\n    if (addressArray[index].types[0]) {\n      for (let j = 0; j < addressArray.length; j++) {\n        if (\"sublocality_level_1\" === addressArray[index].types[j] || \"locality\" === addressArray[index].types[j]) {\n          area = addressArray[index].long_name;\n          return area;\n        }\n      }\n    }\n  }\n};\n\nconst getState = addressArray => {\n  let state = \"\";\n\n  for (let index = 0; index < addressArray.length; index++) {\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n        state = addressArray[index].long_name;\n        return state;\n      }\n    }\n  }\n};\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"map-center\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(\"locate\", position);\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        Geodcode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n          const address = response.results[0].formatted_address,\n                addressArray = response.results[0].address_components,\n                city = getCity(addressArray),\n                state = getState(addressArray),\n                area = getArea(addressArray);\n        });\n      }, () => null);\n    },\n    children: /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fa fa-map-marker\",\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Locate;\nexport default Locate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Locate\");","map":{"version":3,"sources":["D:/1App/client/src/utils/locateMap.js"],"names":["response","React","Geodcode","getCity","addressArray","city","index","length","types","long_name","getArea","area","j","getState","state","Locate","panTo","navigator","geolocation","getCurrentPosition","position","console","log","lat","coords","latitude","lng","longitude","fromLatLng","then","address","results","formatted_address","address_components"],"mappings":"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","sourcesContent":["import { response } from \"express\";\r\nimport React from \"react\";\r\nimport Geodcode from \"react-geocode\";\r\n\r\nconst getCity = addressArray => {\r\n  let city = \"\";\r\n  for (let index = 0; index < addressArray.length; index++) {\r\n    if (\r\n      addressArray[index].types[0] &&\r\n      \"administrative_area_level_2\" === addressArray[index].types[0]\r\n    ) {\r\n      city = addressArray[index].long_name;\r\n      return city;\r\n    }\r\n  }\r\n};\r\n\r\nconst getArea = addressArray => {\r\n  let area = \"\";\r\n  for (let index = 0; index < addressArray.length; index++) {\r\n    if (addressArray[index].types[0]) {\r\n      for (let j = 0; j < addressArray.length; j++) {\r\n        if (\r\n          \"sublocality_level_1\" === addressArray[index].types[j] ||\r\n          \"locality\" === addressArray[index].types[j]\r\n        ) {\r\n          area = addressArray[index].long_name;\r\n          return area;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst getState = addressArray => {\r\n  let state = \"\";\r\n  for (let index = 0; index < addressArray.length; index++) {\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (\r\n        addressArray[index].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[index].types[0]\r\n      ) {\r\n        state = addressArray[index].long_name;\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction Locate({ panTo }) {\r\n  return (\r\n    <button\r\n      className='map-center'\r\n      onClick={() => {\r\n        navigator.geolocation.getCurrentPosition(\r\n          position => {\r\n            console.log(\"locate\", position);\r\n            panTo({\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            });\r\n            Geodcode.fromLatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            ).then(response => {\r\n              const address = response.results[0].formatted_address,\r\n                addressArray = response.results[0].address_components,\r\n                city = getCity(addressArray),\r\n                state = getState(addressArray),\r\n                area = getArea(addressArray);\r\n            });\r\n          },\r\n\r\n          () => null\r\n        );\r\n      }}\r\n    >\r\n      <i className='fa fa-map-marker' aria-hidden='true'></i>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Locate;\r\n"]},"metadata":{},"sourceType":"module"}