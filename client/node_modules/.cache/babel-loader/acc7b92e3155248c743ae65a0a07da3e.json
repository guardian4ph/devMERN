{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\layout\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geodcode from \"react-geocode\";\nimport AutoComplete from \"react-google-autocomplete\";\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\n\nfunction Map() {\n  _s();\n\n  const [map, setMap] = useState({\n    adddress: \"\",\n    city: \"\",\n    area: \"\",\n    state: \"\",\n    zoom: 15,\n    height: 400,\n    mapPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    },\n    markerPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    }\n  }); //   useEffect(() => {\n  //     if (navigator.geolocation) {\n  //       navigator.geolocation.getCurrentPosition(position => {\n  //         setMap(\n  //           {\n  //             mapPosition: {\n  //               lat: position.coords.latitude,\n  //               lng: position.coords.longitude,\n  //             },\n  //             markerPosition: {\n  //               lat: position.coords.latitude,\n  //               lng: position.coords.longitude,\n  //             },\n  //           },\n  //           () => {\n  //             Geodcode.fromLatLng(\n  //               position.coords.latitude,\n  //               position.coords.longitude\n  //             ).then(response => {\n  //               console.log(\"Response\", response);\n  //               const address = response.results[0].formatted_address,\n  //                 addressArray = response.results[0].address_components,\n  //                 city = getCity(addressArray),\n  //                 state = getState(addressArray),\n  //                 area = getArea(addressArray);\n  //               console.log(\"city is\", city);\n  //               console.log(\"Area is\", area);\n  //               console.log(\"state is\", state);\n  //               console.log(\"Address is\", address);\n  //               setMap({\n  //                 address: address ? address : \"\",\n  //                 city: city ? city : \"\",\n  //                 area: area ? area : \"\",\n  //                 state: state ? city : \"\",\n  //               });\n  //             });\n  //           }\n  //         );\n  //       });\n  //     }\n  //   }, []);\n\n  const getCity = addressArray => {\n    let city = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n        city = addressArray[index].long_name;\n        return city;\n      }\n    }\n  };\n\n  const getArea = addressArray => {\n    let area = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0]) {\n        for (let j = 0; j < addressArray.length; j++) {\n          if (\"sublocality_level_1\" === addressArray[index].types[j] || \"locality\" === addressArray[index].types[j]) {\n            area = addressArray[index].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n\n  const getState = addressArray => {\n    let state = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n          state = addressArray[index].long_name;\n          return state;\n        }\n      }\n    }\n  };\n\n  const onMarkerDragEnd = e => {\n    let newLat = e.latLng.lat();\n    let newLng = e.latLng.lng();\n    console.log(\"New Latitude\", newLat);\n    console.log(\"New Longitude\", newLng);\n    Geodcode.fromLatLng(newLat, newLng).then(response => {\n      console.log(\"Response\", response);\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = getCity(addressArray),\n            state = getState(addressArray),\n            area = getArea(addressArray);\n      console.log(\"city is\", city);\n      console.log(\"Area is\", area);\n      console.log(\"state is\", state);\n      console.log(\"Address is\", address);\n      setMap({\n        address: address ? address : \"\",\n        city: city ? city : \"\",\n        area: area ? area : \"\",\n        state: state ? city : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n    });\n  };\n\n  const onPlaceSelected = place => {\n    const address = place.formatted_address,\n          addressArray = place.address_components,\n          city = getCity(addressArray),\n          area = getArea(addressArray),\n          state = getState(addressArray),\n          newLat = place.geometry.location.lat(),\n          newLng = place.geometry.location.lng();\n    setMap({\n      address: address ? address : \"\",\n      city: city ? city : \"\",\n      area: area ? area : \"\",\n      state: state ? city : \"\",\n      markerPosition: {\n        lat: newLat,\n        lng: newLng\n      },\n      mapPosition: {\n        lat: newLat,\n        lng: newLng\n      }\n    });\n    console.log(\"Place is\", place);\n  };\n\n  {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: setMap.zoom,\n      defaultCenter: {\n        lat: 10.3272994,\n        lng: 123.9431079\n      },\n      children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n        className: \"autocomplete\",\n        types: [\"(regions)\"],\n        onPlaceSelected: onPlaceSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        draggable: true,\n        onDragEnd: onMarkerDragEnd,\n        position: {\n          lat: 10.3272994,\n          lng: 123.9431079\n        },\n        children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          marginTop: \"5px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \".5rem\",\n          marginTop: \".5rem\",\n          maxWidth: 1500\n        },\n        children: /*#__PURE__*/_jsxDEV(MapWithAMarker, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places\",\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `50%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 31\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"1rem\",\n          marginTop: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: setMap.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Map, \"f1L/URiUmmsGMN27VPzT3wPhSz4=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/1App/client/src/components/layout/Map.js"],"names":["React","Fragment","useEffect","useState","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geodcode","AutoComplete","setApiKey","Map","map","setMap","adddress","city","area","state","zoom","height","mapPosition","lat","lng","markerPosition","getCity","addressArray","index","length","types","long_name","getArea","j","getState","onMarkerDragEnd","e","newLat","latLng","newLng","console","log","fromLatLng","then","response","address","results","formatted_address","address_components","onPlaceSelected","place","geometry","location","MapWithAMarker","props","width","marginTop","padding","maxWidth"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  InfoWindow,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geodcode from \"react-geocode\";\r\nimport AutoComplete from \"react-google-autocomplete\";\r\n\r\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\r\n\r\nfunction Map() {\r\n  const [map, setMap] = useState({\r\n    adddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n    zoom: 15,\r\n    height: 400,\r\n    mapPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n    markerPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n  });\r\n\r\n  //   useEffect(() => {\r\n  //     if (navigator.geolocation) {\r\n  //       navigator.geolocation.getCurrentPosition(position => {\r\n  //         setMap(\r\n  //           {\r\n  //             mapPosition: {\r\n  //               lat: position.coords.latitude,\r\n  //               lng: position.coords.longitude,\r\n  //             },\r\n  //             markerPosition: {\r\n  //               lat: position.coords.latitude,\r\n  //               lng: position.coords.longitude,\r\n  //             },\r\n  //           },\r\n  //           () => {\r\n  //             Geodcode.fromLatLng(\r\n  //               position.coords.latitude,\r\n  //               position.coords.longitude\r\n  //             ).then(response => {\r\n  //               console.log(\"Response\", response);\r\n\r\n  //               const address = response.results[0].formatted_address,\r\n  //                 addressArray = response.results[0].address_components,\r\n  //                 city = getCity(addressArray),\r\n  //                 state = getState(addressArray),\r\n  //                 area = getArea(addressArray);\r\n\r\n  //               console.log(\"city is\", city);\r\n  //               console.log(\"Area is\", area);\r\n  //               console.log(\"state is\", state);\r\n  //               console.log(\"Address is\", address);\r\n\r\n  //               setMap({\r\n  //                 address: address ? address : \"\",\r\n  //                 city: city ? city : \"\",\r\n  //                 area: area ? area : \"\",\r\n  //                 state: state ? city : \"\",\r\n  //               });\r\n  //             });\r\n  //           }\r\n  //         );\r\n  //       });\r\n  //     }\r\n  //   }, []);\r\n\r\n  const getCity = addressArray => {\r\n    let city = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (\r\n        addressArray[index].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[index].types[0]\r\n      ) {\r\n        city = addressArray[index].long_name;\r\n        return city;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getArea = addressArray => {\r\n    let area = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (addressArray[index].types[0]) {\r\n        for (let j = 0; j < addressArray.length; j++) {\r\n          if (\r\n            \"sublocality_level_1\" === addressArray[index].types[j] ||\r\n            \"locality\" === addressArray[index].types[j]\r\n          ) {\r\n            area = addressArray[index].long_name;\r\n            return area;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getState = addressArray => {\r\n    let state = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      for (let index = 0; index < addressArray.length; index++) {\r\n        if (\r\n          addressArray[index].types[0] &&\r\n          \"administrative_area_level_2\" === addressArray[index].types[0]\r\n        ) {\r\n          state = addressArray[index].long_name;\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onMarkerDragEnd = e => {\r\n    let newLat = e.latLng.lat();\r\n    let newLng = e.latLng.lng();\r\n\r\n    console.log(\"New Latitude\", newLat);\r\n    console.log(\"New Longitude\", newLng);\r\n\r\n    Geodcode.fromLatLng(newLat, newLng).then(response => {\r\n      console.log(\"Response\", response);\r\n\r\n      const address = response.results[0].formatted_address,\r\n        addressArray = response.results[0].address_components,\r\n        city = getCity(addressArray),\r\n        state = getState(addressArray),\r\n        area = getArea(addressArray);\r\n\r\n      console.log(\"city is\", city);\r\n      console.log(\"Area is\", area);\r\n      console.log(\"state is\", state);\r\n      console.log(\"Address is\", address);\r\n\r\n      setMap({\r\n        address: address ? address : \"\",\r\n        city: city ? city : \"\",\r\n        area: area ? area : \"\",\r\n        state: state ? city : \"\",\r\n        markerPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n        mapPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  const onPlaceSelected = place => {\r\n    const address = place.formatted_address,\r\n      addressArray = place.address_components,\r\n      city = getCity(addressArray),\r\n      area = getArea(addressArray),\r\n      state = getState(addressArray),\r\n      newLat = place.geometry.location.lat(),\r\n      newLng = place.geometry.location.lng();\r\n\r\n    setMap({\r\n      address: address ? address : \"\",\r\n      city: city ? city : \"\",\r\n      area: area ? area : \"\",\r\n      state: state ? city : \"\",\r\n      markerPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n      mapPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n    });\r\n    console.log(\"Place is\", place);\r\n  };\r\n\r\n  {\r\n    const MapWithAMarker = withScriptjs(\r\n      withGoogleMap(props => (\r\n        <GoogleMap\r\n          defaultZoom={setMap.zoom}\r\n          defaultCenter={{\r\n            lat: 10.3272994,\r\n            lng: 123.9431079,\r\n          }}\r\n        >\r\n          <AutoComplete\r\n            className='autocomplete'\r\n            types={[\"(regions)\"]}\r\n            onPlaceSelected={onPlaceSelected}\r\n          />\r\n\r\n          <Marker\r\n            draggable={true}\r\n            onDragEnd={onMarkerDragEnd}\r\n            position={{\r\n              lat: 10.3272994,\r\n              lng: 123.9431079,\r\n            }}\r\n          >\r\n            <InfoWindow>\r\n              <div>test</div>\r\n            </InfoWindow>\r\n          </Marker>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              marginTop: \"5px\",\r\n            }}\r\n          ></div>\r\n        </GoogleMap>\r\n      ))\r\n    );\r\n\r\n    return (\r\n      <Fragment>\r\n        <div\r\n          style={{\r\n            padding: \".5rem\",\r\n            marginTop: \".5rem\",\r\n            maxWidth: 1500,\r\n          }}\r\n        >\r\n          <MapWithAMarker\r\n            googleMapURL='https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places'\r\n            loadingElement={<div style={{ height: `50%` }} />}\r\n            containerElement={<div className='map' />}\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n          />\r\n        </div>\r\n\r\n        <div style={{ padding: \"1rem\", marginTop: \"1rem\" }}>\r\n          <div>{setMap.address}</div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}