{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\socket\\\\Communication.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:8900\");\n\nconst Communication = () => {\n  _s();\n\n  const [me, setMe] = useState(\"\");\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [idToCall, setIdToCall] = useState(\"\");\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState(\"\");\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    });\n    socket.on(\"me\", id => {\n      setMe(id);\n    });\n    socket.on(\"callUser\", data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setName(data.name);\n      setCallerSignal(data.signal);\n    });\n  }, []);\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name: name\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"answerCall\", {\n        signal: data,\n        to: caller\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    peer.signal(callerSignal);\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Communication, \"xhhzue6u6mw+UkuZybs8mGTi+Mw=\");\n\n_c = Communication;\nCommunication.propTypes = {};\nexport default Communication;\n\nvar _c;\n\n$RefreshReg$(_c, \"Communication\");","map":{"version":3,"sources":["D:/1App/client/src/components/socket/Communication.js"],"names":["React","Fragment","useEffect","useRef","useState","CopyToClipboard","Peer","io","socket","connect","Communication","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","callUser","peer","initiator","trickle","emit","userToCall","signalData","answerCall","to","leaveCall","destroy","propTypes"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAH,CAAW,uBAAX,CAAf;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,EAApC;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,EAAhD;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACqB,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACuB,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMyB,OAAO,GAAG1B,MAAM,EAAtB;AACA,QAAM2B,SAAS,GAAG3B,MAAM,EAAxB;AACA,QAAM4B,aAAa,GAAG5B,MAAM,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KADhB,EAEGC,IAFH,CAEQxB,MAAM,IAAI;AACdC,MAAAA,SAAS,CAACD,MAAD,CAAT;AACAgB,MAAAA,OAAO,CAACS,OAAR,CAAgBC,SAAhB,GAA4B1B,MAA5B;AACD,KALH;AAOAL,IAAAA,MAAM,CAACgC,EAAP,CAAU,IAAV,EAAgBC,EAAE,IAAI;AACpB7B,MAAAA,KAAK,CAAC6B,EAAD,CAAL;AACD,KAFD;AAIAjC,IAAAA,MAAM,CAACgC,EAAP,CAAU,UAAV,EAAsBE,IAAI,IAAI;AAC5B1B,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,MAAAA,SAAS,CAACwB,IAAI,CAACC,IAAN,CAAT;AACAf,MAAAA,OAAO,CAACc,IAAI,CAACf,IAAN,CAAP;AACAP,MAAAA,eAAe,CAACsB,IAAI,CAACE,MAAN,CAAf;AACD,KALD;AAMD,GAlBQ,EAkBN,EAlBM,CAAT;;AAmBA,QAAMC,QAAQ,GAAGJ,EAAE,IAAI;AACrB,UAAMK,IAAI,GAAG,IAAIxC,IAAJ,CAAS;AACpByC,MAAAA,SAAS,EAAE,IADS;AAEpBC,MAAAA,OAAO,EAAE,KAFW;AAGpBnC,MAAAA,MAAM,EAAEA;AAHY,KAAT,CAAb;AAKAiC,IAAAA,IAAI,CAACN,EAAL,CAAQ,QAAR,EAAkBE,IAAI,IAAI;AACxBlC,MAAAA,MAAM,CAACyC,IAAP,CAAY,UAAZ,EAAwB;AACtBC,QAAAA,UAAU,EAAET,EADU;AAEtBU,QAAAA,UAAU,EAAET,IAFU;AAGtBC,QAAAA,IAAI,EAAEhC,EAHgB;AAItBgB,QAAAA,IAAI,EAAEA;AAJgB,OAAxB;AAMD,KAPD;AAQAmB,IAAAA,IAAI,CAACN,EAAL,CAAQ,QAAR,EAAkB3B,MAAM,IAAI;AAC1BiB,MAAAA,SAAS,CAACQ,OAAV,CAAkBC,SAAlB,GAA8B1B,MAA9B;AACD,KAFD;AAGAL,IAAAA,MAAM,CAACgC,EAAP,CAAU,cAAV,EAA0BI,MAAM,IAAI;AAClCtB,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAwB,MAAAA,IAAI,CAACF,MAAL,CAAYA,MAAZ;AACD,KAHD;AAKAb,IAAAA,aAAa,CAACO,OAAd,GAAwBQ,IAAxB;AACD,GAvBD;;AAyBA,QAAMM,UAAU,GAAG,MAAM;AACvB9B,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,UAAMwB,IAAI,GAAG,IAAIxC,IAAJ,CAAS;AACpByC,MAAAA,SAAS,EAAE,KADS;AAEpBC,MAAAA,OAAO,EAAE,KAFW;AAGpBnC,MAAAA,MAAM,EAAEA;AAHY,KAAT,CAAb;AAKAiC,IAAAA,IAAI,CAACN,EAAL,CAAQ,QAAR,EAAkBE,IAAI,IAAI;AACxBlC,MAAAA,MAAM,CAACyC,IAAP,CAAY,YAAZ,EAA0B;AAAEL,QAAAA,MAAM,EAAEF,IAAV;AAAgBW,QAAAA,EAAE,EAAEpC;AAApB,OAA1B;AACD,KAFD;AAGA6B,IAAAA,IAAI,CAACN,EAAL,CAAQ,QAAR,EAAkB3B,MAAM,IAAI;AAC1BiB,MAAAA,SAAS,CAACQ,OAAV,CAAkBC,SAAlB,GAA8B1B,MAA9B;AACD,KAFD;AAIAiC,IAAAA,IAAI,CAACF,MAAL,CAAYzB,YAAZ;AACAY,IAAAA,aAAa,CAACO,OAAd,GAAwBQ,IAAxB;AACD,GAhBD;;AAkBA,QAAMQ,SAAS,GAAG,MAAM;AACtB5B,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,IAAAA,aAAa,CAACO,OAAd,CAAsBiB,OAAtB;AACD,GAHD;;AAKA,sBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlFD;;GAAM7C,a;;KAAAA,a;AAoFNA,aAAa,CAAC8C,SAAd,GAA0B,EAA1B;AAEA,eAAe9C,aAAf","sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport Peer from \"simple-peer\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst socket = io.connect(\"http://localhost:8900\");\r\n\r\nconst Communication = () => {\r\n  const [me, setMe] = useState(\"\");\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [idToCall, setIdToCall] = useState(\"\");\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then(stream => {\r\n        setStream(stream);\r\n        myVideo.current.srcObject = stream;\r\n      });\r\n\r\n    socket.on(\"me\", id => {\r\n      setMe(id);\r\n    });\r\n\r\n    socket.on(\"callUser\", data => {\r\n      setReceivingCall(true);\r\n      setCaller(data.from);\r\n      setName(data.name);\r\n      setCallerSignal(data.signal);\r\n    });\r\n  }, []);\r\n  const callUser = id => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n    peer.on(\"signal\", data => {\r\n      socket.emit(\"callUser\", {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name: name,\r\n      });\r\n    });\r\n    peer.on(\"stream\", stream => {\r\n      userVideo.current.srcObject = stream;\r\n    });\r\n    socket.on(\"callAccepted\", signal => {\r\n      setCallAccepted(true);\r\n      peer.signal(signal);\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n    peer.on(\"signal\", data => {\r\n      socket.emit(\"answerCall\", { signal: data, to: caller });\r\n    });\r\n    peer.on(\"stream\", stream => {\r\n      userVideo.current.srcObject = stream;\r\n    });\r\n\r\n    peer.signal(callerSignal);\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n    connectionRef.current.destroy();\r\n  };\r\n\r\n  return <Fragment></Fragment>;\r\n};\r\n\r\nCommunication.propTypes = {};\r\n\r\nexport default Communication;\r\n"]},"metadata":{},"sourceType":"module"}