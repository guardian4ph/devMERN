{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\layout\\\\Map.js\";\nimport React, { Fragment } from \"react\";\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geodcode from \"react-geocode\";\nimport AutoComplete from \"react-google-autocomplete\";\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\n\nconst Map = () => {\n  state = {\n    adddress: \"\",\n    city: \"\",\n    area: \"\",\n    state: \"\",\n    zoom: 15,\n    height: 400,\n    mapPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    },\n    markerPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    }\n  };\n  componentWillMount();\n  {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geodcode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            console.log(\"Response\", response);\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  state = this.getState(addressArray),\n                  area = this.getArea(addressArray);\n            console.log(\"city is\", city);\n            console.log(\"Area is\", area);\n            console.log(\"state is\", state);\n            console.log(\"Address is\", address);\n            this.setState({\n              address: address ? address : \"\",\n              city: city ? city : \"\",\n              area: area ? area : \"\",\n              state: state ? city : \"\"\n            });\n          });\n        });\n      });\n    }\n  }\n\n  getCity = addressArray => {\n    let city = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n        city = addressArray[index].long_name;\n        return city;\n      }\n    }\n  };\n\n  getArea = addressArray => {\n    let area = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0]) {\n        for (let j = 0; j < addressArray.length; j++) {\n          if (\"sublocality_level_1\" === addressArray[index].types[j] || \"locality\" === addressArray[index].types[j]) {\n            area = addressArray[index].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n\n  getState = addressArray => {\n    let state = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n          state = addressArray[index].long_name;\n          return state;\n        }\n      }\n    }\n  };\n\n  onMarkerDragEnd = e => {\n    let newLat = e.latLng.lat();\n    let newLng = e.latLng.lng();\n    console.log(\"New Latitude\", newLat);\n    console.log(\"New Longitude\", newLng);\n    Geodcode.fromLatLng(newLat, newLng).then(response => {\n      console.log(\"Response\", response);\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            state = this.getState(addressArray),\n            area = this.getArea(addressArray);\n      console.log(\"city is\", city);\n      console.log(\"Area is\", area);\n      console.log(\"state is\", state);\n      console.log(\"Address is\", address);\n      this.setState({\n        address: address ? address : \"\",\n        city: city ? city : \"\",\n        area: area ? area : \"\",\n        state: state ? city : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n    });\n  };\n\n  onPlaceSelected = place => {\n    const address = place.formatted_address,\n          addressArray = place.address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray),\n          newLat = place.geometry.location.lat(),\n          newLng = place.geometry.location.lng();\n    this.setState({\n      address: address ? address : \"\",\n      city: city ? city : \"\",\n      area: area ? area : \"\",\n      state: state ? city : \"\",\n      markerPosition: {\n        lat: newLat,\n        lng: newLng\n      },\n      mapPosition: {\n        lat: newLat,\n        lng: newLng\n      }\n    });\n    console.log(\"Place is\", place);\n  };\n\n  render();\n  {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: this.state.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n        className: \"autocomplete\",\n        types: [\"(regions)\"],\n        onPlaceSelected: this.onPlaceSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          marginTop: \"5px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \".5rem\",\n          marginTop: \".5rem\",\n          maxWidth: 1500\n        },\n        children: /*#__PURE__*/_jsxDEV(MapWithAMarker, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places\",\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `50%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 31\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"1rem\",\n          marginTop: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/1App/client/src/components/layout/Map.js"],"names":["React","Fragment","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geodcode","AutoComplete","setApiKey","Map","state","adddress","city","area","zoom","height","mapPosition","lat","lng","markerPosition","componentWillMount","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fromLatLng","then","response","console","log","address","results","formatted_address","addressArray","address_components","getCity","getState","getArea","index","length","types","long_name","j","onMarkerDragEnd","e","newLat","latLng","newLng","onPlaceSelected","place","geometry","location","render","MapWithAMarker","props","width","marginTop","padding","maxWidth"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport {\r\n  InfoWindow,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geodcode from \"react-geocode\";\r\nimport AutoComplete from \"react-google-autocomplete\";\r\n\r\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\r\n\r\nconst Map = () => {\r\n  state = {\r\n    adddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n    zoom: 15,\r\n    height: 400,\r\n    mapPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n    markerPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n  };\r\n\r\n  componentWillMount();\r\n  {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.setState(\r\n          {\r\n            mapPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n            markerPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n          },\r\n          () => {\r\n            Geodcode.fromLatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            ).then(response => {\r\n              console.log(\"Response\", response);\r\n\r\n              const address = response.results[0].formatted_address,\r\n                addressArray = response.results[0].address_components,\r\n                city = this.getCity(addressArray),\r\n                state = this.getState(addressArray),\r\n                area = this.getArea(addressArray);\r\n\r\n              console.log(\"city is\", city);\r\n              console.log(\"Area is\", area);\r\n              console.log(\"state is\", state);\r\n              console.log(\"Address is\", address);\r\n\r\n              this.setState({\r\n                address: address ? address : \"\",\r\n                city: city ? city : \"\",\r\n                area: area ? area : \"\",\r\n                state: state ? city : \"\",\r\n              });\r\n            });\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }\r\n  getCity = addressArray => {\r\n    let city = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (\r\n        addressArray[index].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[index].types[0]\r\n      ) {\r\n        city = addressArray[index].long_name;\r\n        return city;\r\n      }\r\n    }\r\n  };\r\n\r\n  getArea = addressArray => {\r\n    let area = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (addressArray[index].types[0]) {\r\n        for (let j = 0; j < addressArray.length; j++) {\r\n          if (\r\n            \"sublocality_level_1\" === addressArray[index].types[j] ||\r\n            \"locality\" === addressArray[index].types[j]\r\n          ) {\r\n            area = addressArray[index].long_name;\r\n            return area;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  getState = addressArray => {\r\n    let state = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      for (let index = 0; index < addressArray.length; index++) {\r\n        if (\r\n          addressArray[index].types[0] &&\r\n          \"administrative_area_level_2\" === addressArray[index].types[0]\r\n        ) {\r\n          state = addressArray[index].long_name;\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  onMarkerDragEnd = e => {\r\n    let newLat = e.latLng.lat();\r\n    let newLng = e.latLng.lng();\r\n\r\n    console.log(\"New Latitude\", newLat);\r\n    console.log(\"New Longitude\", newLng);\r\n\r\n    Geodcode.fromLatLng(newLat, newLng).then(response => {\r\n      console.log(\"Response\", response);\r\n\r\n      const address = response.results[0].formatted_address,\r\n        addressArray = response.results[0].address_components,\r\n        city = this.getCity(addressArray),\r\n        state = this.getState(addressArray),\r\n        area = this.getArea(addressArray);\r\n\r\n      console.log(\"city is\", city);\r\n      console.log(\"Area is\", area);\r\n      console.log(\"state is\", state);\r\n      console.log(\"Address is\", address);\r\n\r\n      this.setState({\r\n        address: address ? address : \"\",\r\n        city: city ? city : \"\",\r\n        area: area ? area : \"\",\r\n        state: state ? city : \"\",\r\n        markerPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n        mapPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  onPlaceSelected = place => {\r\n    const address = place.formatted_address,\r\n      addressArray = place.address_components,\r\n      city = this.getCity(addressArray),\r\n      area = this.getArea(addressArray),\r\n      state = this.getState(addressArray),\r\n      newLat = place.geometry.location.lat(),\r\n      newLng = place.geometry.location.lng();\r\n\r\n    this.setState({\r\n      address: address ? address : \"\",\r\n      city: city ? city : \"\",\r\n      area: area ? area : \"\",\r\n      state: state ? city : \"\",\r\n      markerPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n      mapPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n    });\r\n    console.log(\"Place is\", place);\r\n  };\r\n\r\n  render();\r\n  {\r\n    const MapWithAMarker = withScriptjs(\r\n      withGoogleMap(props => (\r\n        <GoogleMap\r\n          defaultZoom={this.state.zoom}\r\n          defaultCenter={{\r\n            lat: this.state.mapPosition.lat,\r\n            lng: this.state.mapPosition.lng,\r\n          }}\r\n        >\r\n          <AutoComplete\r\n            className='autocomplete'\r\n            types={[\"(regions)\"]}\r\n            onPlaceSelected={this.onPlaceSelected}\r\n          />\r\n\r\n          <Marker\r\n            draggable={true}\r\n            onDragEnd={this.onMarkerDragEnd}\r\n            position={{\r\n              lat: this.state.markerPosition.lat,\r\n              lng: this.state.markerPosition.lng,\r\n            }}\r\n          >\r\n            <InfoWindow>\r\n              <div>test</div>\r\n            </InfoWindow>\r\n          </Marker>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              marginTop: \"5px\",\r\n            }}\r\n          ></div>\r\n        </GoogleMap>\r\n      ))\r\n    );\r\n\r\n    return (\r\n      <Fragment>\r\n        <div\r\n          style={{\r\n            padding: \".5rem\",\r\n            marginTop: \".5rem\",\r\n            maxWidth: 1500,\r\n          }}\r\n        >\r\n          <MapWithAMarker\r\n            googleMapURL='https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places'\r\n            loadingElement={<div style={{ height: `50%` }} />}\r\n            containerElement={<div className='map' />}\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n          />\r\n        </div>\r\n\r\n        <div style={{ padding: \"1rem\", marginTop: \"1rem\" }}>\r\n          <div>{this.state.address}</div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}