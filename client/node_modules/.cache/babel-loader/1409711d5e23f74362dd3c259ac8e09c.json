{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\layout\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geodcode from \"react-geocode\";\nimport AutoComplete from \"react-google-autocomplete\";\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\n\nconst Map = () => {\n  _s();\n\n  const [map, setMap] = useState({\n    adddress: \"\",\n    city: \"\",\n    area: \"\",\n    state: \"\",\n    zoom: 15,\n    height: 400,\n    mapPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    },\n    markerPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    }\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setMap({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geodcode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            console.log(\"Response\", response);\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = getCity(addressArray),\n                  state = getState(addressArray),\n                  area = getArea(addressArray);\n            console.log(\"city is\", city);\n            console.log(\"Area is\", area);\n            console.log(\"state is\", state);\n            console.log(\"Address is\", address);\n            setMap({\n              address: address ? address : \"\",\n              city: city ? city : \"\",\n              area: area ? area : \"\",\n              state: state ? city : \"\"\n            });\n          });\n        });\n      });\n    }\n  }, []);\n\n  const getCity = addressArray => {\n    let city = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n        city = addressArray[index].long_name;\n        return city;\n      }\n    }\n  };\n\n  const getArea = addressArray => {\n    let area = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0]) {\n        for (let j = 0; j < addressArray.length; j++) {\n          if (\"sublocality_level_1\" === addressArray[index].types[j] || \"locality\" === addressArray[index].types[j]) {\n            area = addressArray[index].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n\n  const getState = addressArray => {\n    let state = \"\";\n\n    for (let index = 0; index < addressArray.length; index++) {\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n          state = addressArray[index].long_name;\n          return state;\n        }\n      }\n    }\n  };\n\n  const onMarkerDragEnd = e => {\n    let newLat = e.latLng.lat();\n    let newLng = e.latLng.lng();\n    console.log(\"New Latitude\", newLat);\n    console.log(\"New Longitude\", newLng);\n    Geodcode.fromLatLng(newLat, newLng).then(response => {\n      console.log(\"Response\", response);\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = getCity(addressArray),\n            state = getState(addressArray),\n            area = getArea(addressArray);\n      console.log(\"city is\", city);\n      console.log(\"Area is\", area);\n      console.log(\"state is\", state);\n      console.log(\"Address is\", address);\n      setMap({\n        address: address ? address : \"\",\n        city: city ? city : \"\",\n        area: area ? area : \"\",\n        state: state ? city : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n    });\n  };\n\n  const onPlaceSelected = place => {\n    const address = place.formatted_address,\n          addressArray = place.address_components,\n          city = getCity(addressArray),\n          area = getArea(addressArray),\n          state = getState(addressArray),\n          newLat = place.geometry.location.lat(),\n          newLng = place.geometry.location.lng();\n    setMap({\n      address: address ? address : \"\",\n      city: city ? city : \"\",\n      area: area ? area : \"\",\n      state: state ? city : \"\",\n      markerPosition: {\n        lat: newLat,\n        lng: newLng\n      },\n      mapPosition: {\n        lat: newLat,\n        lng: newLng\n      }\n    });\n    console.log(\"Place is\", place);\n  };\n\n  const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n    defaultZoom: setMap.zoom,\n    defaultCenter: {\n      lat: setMap.mapPosition.lat,\n      lng: 123.9431079\n    },\n    children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n      className: \"autocomplete\",\n      types: [\"(regions)\"],\n      onPlaceSelected: onPlaceSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Marker, {\n      draggable: true,\n      onDragEnd: onMarkerDragEnd,\n      position: {\n        lat: 10.3272994,\n        lng: 123.9431079\n      },\n      children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        marginTop: \"5px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 7\n  }, this)));\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \".5rem\",\n        marginTop: \".5rem\",\n        maxWidth: 1500\n      },\n      children: /*#__PURE__*/_jsxDEV(MapWithAMarker, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places\",\n        loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `50%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 27\n        }, this),\n        containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 29\n        }, this),\n        mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"1rem\",\n        marginTop: \"1rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" Your address \", setMap.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"8luv0GyeF7iSMxHgpFCdY00sY6o=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/1App/client/src/components/layout/Map.js"],"names":["React","Fragment","useEffect","useState","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geodcode","AutoComplete","setApiKey","Map","map","setMap","adddress","city","area","state","zoom","height","mapPosition","lat","lng","markerPosition","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fromLatLng","then","response","console","log","address","results","formatted_address","addressArray","address_components","getCity","getState","getArea","index","length","types","long_name","j","onMarkerDragEnd","e","newLat","latLng","newLng","onPlaceSelected","place","geometry","location","MapWithAMarker","props","width","marginTop","padding","maxWidth"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  InfoWindow,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geodcode from \"react-geocode\";\r\nimport AutoComplete from \"react-google-autocomplete\";\r\n\r\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\r\n\r\nconst Map = () => {\r\n  const [map, setMap] = useState({\r\n    adddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n    zoom: 15,\r\n    height: 400,\r\n    mapPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n    markerPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        setMap(\r\n          {\r\n            mapPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n            markerPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n          },\r\n          () => {\r\n            Geodcode.fromLatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            ).then(response => {\r\n              console.log(\"Response\", response);\r\n\r\n              const address = response.results[0].formatted_address,\r\n                addressArray = response.results[0].address_components,\r\n                city = getCity(addressArray),\r\n                state = getState(addressArray),\r\n                area = getArea(addressArray);\r\n\r\n              console.log(\"city is\", city);\r\n              console.log(\"Area is\", area);\r\n              console.log(\"state is\", state);\r\n              console.log(\"Address is\", address);\r\n\r\n              setMap({\r\n                address: address ? address : \"\",\r\n                city: city ? city : \"\",\r\n                area: area ? area : \"\",\r\n                state: state ? city : \"\",\r\n              });\r\n            });\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const getCity = addressArray => {\r\n    let city = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (\r\n        addressArray[index].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[index].types[0]\r\n      ) {\r\n        city = addressArray[index].long_name;\r\n        return city;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getArea = addressArray => {\r\n    let area = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (addressArray[index].types[0]) {\r\n        for (let j = 0; j < addressArray.length; j++) {\r\n          if (\r\n            \"sublocality_level_1\" === addressArray[index].types[j] ||\r\n            \"locality\" === addressArray[index].types[j]\r\n          ) {\r\n            area = addressArray[index].long_name;\r\n            return area;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const getState = addressArray => {\r\n    let state = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      for (let index = 0; index < addressArray.length; index++) {\r\n        if (\r\n          addressArray[index].types[0] &&\r\n          \"administrative_area_level_2\" === addressArray[index].types[0]\r\n        ) {\r\n          state = addressArray[index].long_name;\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onMarkerDragEnd = e => {\r\n    let newLat = e.latLng.lat();\r\n    let newLng = e.latLng.lng();\r\n\r\n    console.log(\"New Latitude\", newLat);\r\n    console.log(\"New Longitude\", newLng);\r\n\r\n    Geodcode.fromLatLng(newLat, newLng).then(response => {\r\n      console.log(\"Response\", response);\r\n\r\n      const address = response.results[0].formatted_address,\r\n        addressArray = response.results[0].address_components,\r\n        city = getCity(addressArray),\r\n        state = getState(addressArray),\r\n        area = getArea(addressArray);\r\n\r\n      console.log(\"city is\", city);\r\n      console.log(\"Area is\", area);\r\n      console.log(\"state is\", state);\r\n      console.log(\"Address is\", address);\r\n\r\n      setMap({\r\n        address: address ? address : \"\",\r\n        city: city ? city : \"\",\r\n        area: area ? area : \"\",\r\n        state: state ? city : \"\",\r\n        markerPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n        mapPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  const onPlaceSelected = place => {\r\n    const address = place.formatted_address,\r\n      addressArray = place.address_components,\r\n      city = getCity(addressArray),\r\n      area = getArea(addressArray),\r\n      state = getState(addressArray),\r\n      newLat = place.geometry.location.lat(),\r\n      newLng = place.geometry.location.lng();\r\n\r\n    setMap({\r\n      address: address ? address : \"\",\r\n      city: city ? city : \"\",\r\n      area: area ? area : \"\",\r\n      state: state ? city : \"\",\r\n      markerPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n      mapPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n    });\r\n    console.log(\"Place is\", place);\r\n  };\r\n\r\n  const MapWithAMarker = withScriptjs(\r\n    withGoogleMap(props => (\r\n      <GoogleMap\r\n        defaultZoom={setMap.zoom}\r\n        defaultCenter={{\r\n          lat: setMap.mapPosition.lat,\r\n          lng: 123.9431079,\r\n        }}\r\n      >\r\n        <AutoComplete\r\n          className='autocomplete'\r\n          types={[\"(regions)\"]}\r\n          onPlaceSelected={onPlaceSelected}\r\n        />\r\n\r\n        <Marker\r\n          draggable={true}\r\n          onDragEnd={onMarkerDragEnd}\r\n          position={{\r\n            lat: 10.3272994,\r\n            lng: 123.9431079,\r\n          }}\r\n        >\r\n          <InfoWindow>\r\n            <div>test</div>\r\n          </InfoWindow>\r\n        </Marker>\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            marginTop: \"5px\",\r\n          }}\r\n        ></div>\r\n      </GoogleMap>\r\n    ))\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        style={{\r\n          padding: \".5rem\",\r\n          marginTop: \".5rem\",\r\n          maxWidth: 1500,\r\n        }}\r\n      >\r\n        <MapWithAMarker\r\n          googleMapURL='https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places'\r\n          loadingElement={<div style={{ height: `50%` }} />}\r\n          containerElement={<div className='map' />}\r\n          mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ padding: \"1rem\", marginTop: \"1rem\" }}>\r\n        <div> Your address {setMap.address}</div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}