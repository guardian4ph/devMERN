{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\socket\\\\Communication.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useRef, useState } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport Peer from \"simple-peer\";\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://localhost:8900\");\n\nconst Communication = () => {\n  _s();\n\n  const [me, setMe] = useState(\"\");\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [idToCall, setIdToCall] = useState(\"\");\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState(\"\");\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n      myVideo.current.srcObject = stream;\n    });\n    socket.on(\"me\", id => {\n      setMe(id);\n    });\n    socket.on(\"callUser\", data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setName(data.name);\n      setCallerSignal(data.signal);\n    });\n  }, []);\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name: name\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    socket.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"answerCall\", {\n        signal: data,\n        to: caller\n      });\n    });\n    peer.on(\"stream\", stream => {\n      userVideo.current.srcObject = stream;\n    });\n    peer.signal(callerSignal);\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\",\n        color: \"#fff\"\n      },\n      children: \"Zoomish\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video\",\n          children: stream && /*#__PURE__*/_jsxDEV(\"video\", {\n            playsInline: true,\n            muted: true,\n            ref: myVideo,\n            autoPlay: true,\n            style: {\n              width: \"300px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video\",\n          children: callAccepted && !callEnded ? /*#__PURE__*/_jsxDEV(\"video\", {\n            playsInline: true,\n            ref: userVideo,\n            autoPlay: true,\n            style: {\n              width: \"300px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"myId\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          id: \"filled-basic\",\n          label: \"Name\",\n          variant: \"filled\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          style: {\n            marginBottom: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n          text: me,\n          style: {\n            marginBottom: \"2rem\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(AssignmentIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 26\n            }, this),\n            children: \"Copy ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"filled-basic\",\n          label: \"ID to call\",\n          variant: \"filled\",\n          value: idToCall,\n          onChange: e => setIdToCall(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"call-button\",\n          children: [callAccepted && !callEnded ? /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: leaveCall,\n            children: \"End Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"primary\",\n            \"aria-label\": \"call\",\n            onClick: () => callUser(idToCall),\n            children: /*#__PURE__*/_jsxDEV(PhoneIcon, {\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), idToCall]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: receivingCall && !callAccepted ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"caller\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [name, \" is calling...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: answerCall,\n            children: \"Answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Communication, \"xhhzue6u6mw+UkuZybs8mGTi+Mw=\");\n\n_c = Communication;\nCommunication.propTypes = {};\nexport default Communication;\n\nvar _c;\n\n$RefreshReg$(_c, \"Communication\");","map":{"version":3,"sources":["D:/1App/client/src/components/socket/Communication.js"],"names":["React","Fragment","useEffect","useRef","useState","CopyToClipboard","Peer","io","socket","connect","Communication","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","callUser","peer","initiator","trickle","emit","userToCall","signalData","answerCall","to","leaveCall","destroy","textAlign","color","width","e","target","value","marginBottom","propTypes"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport Peer from \"simple-peer\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst socket = io.connect(\"http://localhost:8900\");\r\n\r\nconst Communication = () => {\r\n  const [me, setMe] = useState(\"\");\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [idToCall, setIdToCall] = useState(\"\");\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then(stream => {\r\n        setStream(stream);\r\n        myVideo.current.srcObject = stream;\r\n      });\r\n\r\n    socket.on(\"me\", id => {\r\n      setMe(id);\r\n    });\r\n\r\n    socket.on(\"callUser\", data => {\r\n      setReceivingCall(true);\r\n      setCaller(data.from);\r\n      setName(data.name);\r\n      setCallerSignal(data.signal);\r\n    });\r\n  }, []);\r\n  const callUser = id => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n    peer.on(\"signal\", data => {\r\n      socket.emit(\"callUser\", {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name: name,\r\n      });\r\n    });\r\n    peer.on(\"stream\", stream => {\r\n      userVideo.current.srcObject = stream;\r\n    });\r\n    socket.on(\"callAccepted\", signal => {\r\n      setCallAccepted(true);\r\n      peer.signal(signal);\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n    peer.on(\"signal\", data => {\r\n      socket.emit(\"answerCall\", { signal: data, to: caller });\r\n    });\r\n    peer.on(\"stream\", stream => {\r\n      userVideo.current.srcObject = stream;\r\n    });\r\n\r\n    peer.signal(callerSignal);\r\n    connectionRef.current = peer;\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n    connectionRef.current.destroy();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 style={{ textAlign: \"center\", color: \"#fff\" }}>Zoomish</h1>\r\n      <div className='container'>\r\n        <div className='video-container'>\r\n          <div className='video'>\r\n            {stream && (\r\n              <video\r\n                playsInline\r\n                muted\r\n                ref={myVideo}\r\n                autoPlay\r\n                style={{ width: \"300px\" }}\r\n              />\r\n            )}\r\n          </div>\r\n          <div className='video'>\r\n            {callAccepted && !callEnded ? (\r\n              <video\r\n                playsInline\r\n                ref={userVideo}\r\n                autoPlay\r\n                style={{ width: \"300px\" }}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div className='myId'>\r\n          <TextField\r\n            id='filled-basic'\r\n            label='Name'\r\n            variant='filled'\r\n            value={name}\r\n            onChange={e => setName(e.target.value)}\r\n            style={{ marginBottom: \"20px\" }}\r\n          />\r\n          <CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n            <Button\r\n              variant='contained'\r\n              color='primary'\r\n              startIcon={<AssignmentIcon fontSize='large' />}\r\n            >\r\n              Copy ID\r\n            </Button>\r\n          </CopyToClipboard>\r\n\r\n          <TextField\r\n            id='filled-basic'\r\n            label='ID to call'\r\n            variant='filled'\r\n            value={idToCall}\r\n            onChange={e => setIdToCall(e.target.value)}\r\n          />\r\n          <div className='call-button'>\r\n            {callAccepted && !callEnded ? (\r\n              <Button variant='contained' color='secondary' onClick={leaveCall}>\r\n                End Call\r\n              </Button>\r\n            ) : (\r\n              <IconButton\r\n                color='primary'\r\n                aria-label='call'\r\n                onClick={() => callUser(idToCall)}\r\n              >\r\n                <PhoneIcon fontSize='large' />\r\n              </IconButton>\r\n            )}\r\n            {idToCall}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {receivingCall && !callAccepted ? (\r\n            <div className='caller'>\r\n              <h1>{name} is calling...</h1>\r\n              <Button variant='contained' color='primary' onClick={answerCall}>\r\n                Answer\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCommunication.propTypes = {};\r\n\r\nexport default Communication;\r\n"]},"metadata":{},"sourceType":"module"}