{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\layout\\\\Map.js\";\nimport React, { Fragment } from \"react\";\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geodcode from \"react-geocode\";\nimport AutoComplete from \"react-google-autocomplete\";\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\n\nclass Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      adddress: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n        // Load to specific address/location\n        // lat: 10.3272994,\n        // lng: 123.9431079,\n        lat: 0,\n        lng: 0\n      },\n      markerPosition: {\n        // Load to specific address/location\n        // lat: 10.3272994,\n        // lng: 123.9431079,\n        lat: 0,\n        lng: 0\n      }\n    };\n\n    this.getCity = addressArray => {\n      let city = \"\";\n\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n          city = addressArray[index].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = \"\";\n\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0]) {\n          for (let j = 0; j < addressArray.length; j++) {\n            if (\"sublocality_level_1\" === addressArray[index].types[j] || \"locality\" === addressArray[index].types[j]) {\n              area = addressArray[index].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = \"\";\n\n      for (let index = 0; index < addressArray.length; index++) {\n        for (let index = 0; index < addressArray.length; index++) {\n          if (addressArray[index].types[0] && \"administrative_area_level_2\" === addressArray[index].types[0]) {\n            state = addressArray[index].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onMarkerDragEnd = e => {\n      let newLat = e.latLng.lat();\n      let newLng = e.latLng.lng();\n      console.log(\"New Latitude\", newLat);\n      console.log(\"New Longitude\", newLng);\n      Geodcode.fromLatLng(newLat, newLng).then(response => {\n        console.log(\"Response\", response);\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              state = this.getState(addressArray),\n              area = this.getArea(addressArray);\n        console.log(\"city is\", city);\n        console.log(\"Area is\", area);\n        console.log(\"state is\", state);\n        console.log(\"Address is\", address);\n        this.setState({\n          address: address ? address : \"\",\n          city: city ? city : \"\",\n          area: area ? area : \"\",\n          state: state ? city : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            newLat = place.geometry.location.lat(),\n            newLng = place.geometry.location.lng();\n      this.setState({\n        address: address ? address : \"\",\n        city: city ? city : \"\",\n        area: area ? area : \"\",\n        state: state ? city : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n      console.log(\"Place is\", place);\n    };\n  }\n\n  componentWillMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geodcode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            console.log(\"Response\", response);\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  state = this.getState(addressArray),\n                  area = this.getArea(addressArray);\n            console.log(\"city is\", city);\n            console.log(\"Area is\", area);\n            console.log(\"state is\", state);\n            console.log(\"Address is\", address);\n            this.setState({\n              address: address ? address : \"\",\n              city: city ? city : \"\",\n              area: area ? area : \"\",\n              state: state ? city : \"\"\n            });\n          });\n        });\n      });\n    }\n  }\n\n  render() {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: this.state.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          marginTop: \"5px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(AutoComplete, {\n          style: {\n            width: \"100%\",\n            padding: \"2px\"\n          },\n          types: [\"(regions)\"],\n          onPlaceSelected: this.onPlaceSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"1rem\",\n          marginTop: \"1rem\",\n          maxWidth: 1500\n        },\n        children: /*#__PURE__*/_jsxDEV(MapWithAMarker, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places\",\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `50%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `300px`,\n              width: \"80%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 31\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["D:/1App/client/src/components/layout/Map.js"],"names":["React","Fragment","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geodcode","AutoComplete","setApiKey","Map","Component","state","adddress","city","area","zoom","height","mapPosition","lat","lng","markerPosition","getCity","addressArray","index","length","types","long_name","getArea","j","getState","onMarkerDragEnd","e","newLat","latLng","newLng","console","log","fromLatLng","then","response","address","results","formatted_address","address_components","setState","onPlaceSelected","place","geometry","location","componentWillMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render","MapWithAMarker","props","width","marginTop","padding","maxWidth"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport {\r\n  InfoWindow,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geodcode from \"react-geocode\";\r\nimport AutoComplete from \"react-google-autocomplete\";\r\n\r\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\r\n\r\nclass Map extends React.Component {\r\n  state = {\r\n    adddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n    zoom: 15,\r\n    height: 400,\r\n    mapPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n    markerPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n  };\r\n\r\n  componentWillMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.setState(\r\n          {\r\n            mapPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n            markerPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n          },\r\n          () => {\r\n            Geodcode.fromLatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            ).then(response => {\r\n              console.log(\"Response\", response);\r\n\r\n              const address = response.results[0].formatted_address,\r\n                addressArray = response.results[0].address_components,\r\n                city = this.getCity(addressArray),\r\n                state = this.getState(addressArray),\r\n                area = this.getArea(addressArray);\r\n\r\n              console.log(\"city is\", city);\r\n              console.log(\"Area is\", area);\r\n              console.log(\"state is\", state);\r\n              console.log(\"Address is\", address);\r\n\r\n              this.setState({\r\n                address: address ? address : \"\",\r\n                city: city ? city : \"\",\r\n                area: area ? area : \"\",\r\n                state: state ? city : \"\",\r\n              });\r\n            });\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }\r\n  getCity = addressArray => {\r\n    let city = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (\r\n        addressArray[index].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[index].types[0]\r\n      ) {\r\n        city = addressArray[index].long_name;\r\n        return city;\r\n      }\r\n    }\r\n  };\r\n\r\n  getArea = addressArray => {\r\n    let area = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      if (addressArray[index].types[0]) {\r\n        for (let j = 0; j < addressArray.length; j++) {\r\n          if (\r\n            \"sublocality_level_1\" === addressArray[index].types[j] ||\r\n            \"locality\" === addressArray[index].types[j]\r\n          ) {\r\n            area = addressArray[index].long_name;\r\n            return area;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  getState = addressArray => {\r\n    let state = \"\";\r\n    for (let index = 0; index < addressArray.length; index++) {\r\n      for (let index = 0; index < addressArray.length; index++) {\r\n        if (\r\n          addressArray[index].types[0] &&\r\n          \"administrative_area_level_2\" === addressArray[index].types[0]\r\n        ) {\r\n          state = addressArray[index].long_name;\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  onMarkerDragEnd = e => {\r\n    let newLat = e.latLng.lat();\r\n    let newLng = e.latLng.lng();\r\n\r\n    console.log(\"New Latitude\", newLat);\r\n    console.log(\"New Longitude\", newLng);\r\n\r\n    Geodcode.fromLatLng(newLat, newLng).then(response => {\r\n      console.log(\"Response\", response);\r\n\r\n      const address = response.results[0].formatted_address,\r\n        addressArray = response.results[0].address_components,\r\n        city = this.getCity(addressArray),\r\n        state = this.getState(addressArray),\r\n        area = this.getArea(addressArray);\r\n\r\n      console.log(\"city is\", city);\r\n      console.log(\"Area is\", area);\r\n      console.log(\"state is\", state);\r\n      console.log(\"Address is\", address);\r\n\r\n      this.setState({\r\n        address: address ? address : \"\",\r\n        city: city ? city : \"\",\r\n        area: area ? area : \"\",\r\n        state: state ? city : \"\",\r\n        markerPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n        mapPosition: {\r\n          lat: newLat,\r\n          lng: newLng,\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  onPlaceSelected = place => {\r\n    const address = place.formatted_address,\r\n      addressArray = place.address_components,\r\n      city = this.getCity(addressArray),\r\n      area = this.getArea(addressArray),\r\n      state = this.getState(addressArray),\r\n      newLat = place.geometry.location.lat(),\r\n      newLng = place.geometry.location.lng();\r\n\r\n    this.setState({\r\n      address: address ? address : \"\",\r\n      city: city ? city : \"\",\r\n      area: area ? area : \"\",\r\n      state: state ? city : \"\",\r\n      markerPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n      mapPosition: {\r\n        lat: newLat,\r\n        lng: newLng,\r\n      },\r\n    });\r\n    console.log(\"Place is\", place);\r\n  };\r\n\r\n  render() {\r\n    const MapWithAMarker = withScriptjs(\r\n      withGoogleMap(props => (\r\n        <GoogleMap\r\n          defaultZoom={this.state.zoom}\r\n          defaultCenter={{\r\n            lat: this.state.mapPosition.lat,\r\n            lng: this.state.mapPosition.lng,\r\n          }}\r\n        >\r\n          <Marker\r\n            draggable={true}\r\n            onDragEnd={this.onMarkerDragEnd}\r\n            position={{\r\n              lat: this.state.markerPosition.lat,\r\n              lng: this.state.markerPosition.lng,\r\n            }}\r\n          >\r\n            <InfoWindow>\r\n              <div>test</div>\r\n            </InfoWindow>\r\n          </Marker>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              marginTop: \"5px\",\r\n            }}\r\n          >\r\n            <AutoComplete\r\n              style={{\r\n                width: \"100%\",\r\n                padding: \"2px\",\r\n              }}\r\n              types={[\"(regions)\"]}\r\n              onPlaceSelected={this.onPlaceSelected}\r\n            />\r\n          </div>\r\n        </GoogleMap>\r\n      ))\r\n    );\r\n\r\n    return (\r\n      <Fragment>\r\n        <div\r\n          style={{\r\n            padding: \"1rem\",\r\n            marginTop: \"1rem\",\r\n            maxWidth: 1500,\r\n          }}\r\n        >\r\n          <MapWithAMarker\r\n            googleMapURL='https://maps.googleapis.com/maps/api/js?key=AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo&v=3.exp&libraries=geometry,drawing,places'\r\n            loadingElement={<div style={{ height: `50%` }} />}\r\n            containerElement={<div style={{ height: `300px`, width: \"80%\" }} />}\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n          />\r\n        </div>\r\n        <div>\r\n          <div>{this.state.address}</div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}