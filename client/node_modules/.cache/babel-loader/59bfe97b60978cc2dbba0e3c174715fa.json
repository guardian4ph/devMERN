{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\opcens\\\\OpcenConsole.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Dashboard from \"../operation-center/Dashboard_opcen\";\nimport Spinner from \"../layout/Spinner\";\nimport { getOpcenProfileById } from \"../../actions/opcenprofile\";\nimport { getOpcens } from \"../../actions/opcen\";\nimport { withRouter } from \"react-router\";\n\nconst OpcenConsole = ({\n  user,\n  getOpcenProfileById,\n  opcen_id,\n  opcen,\n  opcen_profile: {\n    profile,\n    loading\n  }\n}) => {\n  _s();\n\n  useEffect(() => {\n    getOpcens(user);\n    getOpcenProfileById(opcen_id);\n  }, [getOpcenProfileById]);\n  return loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        background: \"#fff\",\n        borderRadius: \"10px\",\n        marginBottom: \"5px\",\n        height: \"100px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            height: \"88px\",\n            width: \"88px\",\n            padding: \"8px\",\n            marginLeft: \"5%\"\n          },\n          src: `/opcenlogo/${profile.logo}`,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", opcen.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", opcen.category]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OpcenConsole, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = OpcenConsole;\nOpcenConsole.propTypes = {\n  getOpcenProfileById: PropTypes.func.isRequired,\n  opcen: PropTypes.object.isRequired,\n  opcen_id: PropTypes.object.isRequired,\n  opcen_profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  opcen: state.opcen.opcen,\n  opcen_id: state.opcen.opcen._id,\n  opcen_profile: state.opcen_profile,\n  user: state.auth._id\n});\n\nexport default connect(mapStateToProps, {\n  getOpcenProfileById\n})(withRouter(OpcenConsole));\n\nvar _c;\n\n$RefreshReg$(_c, \"OpcenConsole\");","map":{"version":3,"sources":["D:/1App/client/src/components/opcens/OpcenConsole.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Dashboard","Spinner","getOpcenProfileById","getOpcens","withRouter","OpcenConsole","user","opcen_id","opcen","opcen_profile","profile","loading","display","flexDirection","justifyContent","alignItems","background","borderRadius","marginBottom","height","width","padding","marginLeft","logo","name","category","propTypes","func","isRequired","object","mapStateToProps","state","_id","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport Dashboard from \"../operation-center/Dashboard_opcen\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport { getOpcenProfileById } from \"../../actions/opcenprofile\";\r\nimport { getOpcens } from \"../../actions/opcen\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst OpcenConsole = ({\r\n  user,\r\n  getOpcenProfileById,\r\n  opcen_id,\r\n  opcen,\r\n  opcen_profile: { profile, loading },\r\n}) => {\r\n  useEffect(() => {\r\n    getOpcens(user);\r\n    getOpcenProfileById(opcen_id);\r\n  }, [getOpcenProfileById]);\r\n\r\n  return loading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <Fragment>\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"center\",\r\n            background: \"#fff\",\r\n            borderRadius: \"10px\",\r\n            marginBottom: \"5px\",\r\n            height: \"100px\",\r\n          }}\r\n        >\r\n          <div>\r\n            <img\r\n              style={{\r\n                height: \"88px\",\r\n                width: \"88px\",\r\n                padding: \"8px\",\r\n                marginLeft: \"5%\",\r\n              }}\r\n              src={`/opcenlogo/${profile.logo}`}\r\n              alt=''\r\n            />\r\n          </div>\r\n          <div>\r\n            <h2> {opcen.name}</h2>\r\n            <p> {opcen.category}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <Dashboard />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nOpcenConsole.propTypes = {\r\n  getOpcenProfileById: PropTypes.func.isRequired,\r\n  opcen: PropTypes.object.isRequired,\r\n  opcen_id: PropTypes.object.isRequired,\r\n  opcen_profile: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  opcen: state.opcen.opcen,\r\n  opcen_id: state.opcen.opcen._id,\r\n  opcen_profile: state.opcen_profile,\r\n  user: state.auth._id,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getOpcenProfileById })(\r\n  withRouter(OpcenConsole)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}