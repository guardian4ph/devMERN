{"ast":null,"code":"import axios from \"axios\";\nimport { v4 as uuid } from \"uuid\";\nimport { SEND_OTP, SEND_OTP_FAIL, REMOVE_OTP } from \"./types\";\nimport { setAlert } from \"./alert\";\nexport const sendOtp = (user, number, name, msg, otp, timeout = 300000) => async dispatch => {\n  const id = uuid();\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    user,\n    number,\n    name,\n    msg,\n    otp\n  }); // console.log(\"actions\", number);\n\n  try {\n    const res = await axios.post(\"/api/sms/sendOtp\", body, config);\n    dispatch({\n      type: SEND_OTP,\n      payload: {\n        user,\n        name,\n        id\n      }\n    });\n    setTimeout(() => dispatch({\n      type: REMOVE_OTP,\n      payload: id\n    }), timeout);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: SEND_OTP_FAIL\n    });\n  }\n};\nexport const otpMatch = (number, otpinput) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    number,\n    otpinput\n  }); // console.log(\"actions\", number);\n\n  try {\n    const res = await axios.post(\"/api/sms/sendOtp\", body, config);\n    dispatch({\n      type: SEND_OTP,\n      payload: {\n        user,\n        name,\n        id\n      }\n    });\n    setTimeout(() => dispatch({\n      type: REMOVE_OTP,\n      payload: id\n    }), timeout);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: SEND_OTP_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/1App/client/src/actions/sms.js"],"names":["axios","v4","uuid","SEND_OTP","SEND_OTP_FAIL","REMOVE_OTP","setAlert","sendOtp","user","number","name","msg","otp","timeout","dispatch","id","config","headers","body","JSON","stringify","res","post","type","payload","setTimeout","err","errors","response","data","forEach","error","otpMatch","otpinput"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { SEND_OTP, SEND_OTP_FAIL, REMOVE_OTP } from \"./types\";\r\nimport { setAlert } from \"./alert\";\r\n\r\nexport const sendOtp = (\r\n  user,\r\n  number,\r\n  name,\r\n  msg,\r\n  otp,\r\n  timeout = 300000\r\n) => async dispatch => {\r\n  const id = uuid();\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ user, number, name, msg, otp });\r\n  // console.log(\"actions\", number);\r\n  try {\r\n    const res = await axios.post(\"/api/sms/sendOtp\", body, config);\r\n    dispatch({\r\n      type: SEND_OTP,\r\n      payload: { user, name, id },\r\n    });\r\n\r\n    setTimeout(() => dispatch({ type: REMOVE_OTP, payload: id }), timeout);\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n    dispatch({\r\n      type: SEND_OTP_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const otpMatch = (number, otpinput) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ number, otpinput });\r\n  // console.log(\"actions\", number);\r\n  try {\r\n    const res = await axios.post(\"/api/sms/sendOtp\", body, config);\r\n    dispatch({\r\n      type: SEND_OTP,\r\n      payload: { user, name, id },\r\n    });\r\n\r\n    setTimeout(() => dispatch({ type: REMOVE_OTP, payload: id }), timeout);\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n    dispatch({\r\n      type: SEND_OTP_FAIL,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}