{"ast":null,"code":"import axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, CLEAR_PROFILE, RESET_PASSWORD, FORGOT_PASSWORD, SEND_OTP } from \"./types\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../utils/setAuthToken\"; //Load User check if there is a token for user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  lname,\n  number,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    lname,\n    number,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n}; //  Check if User Exist via email\n\nexport const forgot_password = email => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth/forgot\", body, config);\n    dispatch({\n      type: RESET_PASSWORD,\n      payload: res.data\n    });\n    dispatch(send_otp());\n    dispatch(setAlert(\"One time pin (OTP) send to your mobile number. Please dont share this pin to anyone.\", \"success\"));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n  }\n}; //  SEND OTP\n\nexport const send_otp = number => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Cookie: \"devckie=db59-b300-9176-0043\"\n    }\n  };\n  const text = Math.floor(Math.random() * 899999 + 100000);\n  const body = JSON.stringify({\n    text: `Testing lng po ${text}`,\n    param: [{\n      number: \"09173146624\"\n    }]\n  });\n\n  try {\n    const res = await axios.post(\"https://192.168.1.2/api/send_sms\", body, config);\n    dispatch({\n      type: SEND_OTP,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n  }\n};","map":{"version":3,"sources":["D:/1App/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","CLEAR_PROFILE","RESET_PASSWORD","FORGOT_PASSWORD","SEND_OTP","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","lname","number","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout","forgot_password","send_otp","Cookie","text","Math","floor","random","param"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT,\r\n  CLEAR_PROFILE,\r\n  RESET_PASSWORD,\r\n  FORGOT_PASSWORD,\r\n  SEND_OTP,\r\n} from \"./types\";\r\nimport { setAlert } from \"./alert\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\n\r\n//Load User check if there is a token for user\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get(\"/api/auth\");\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: AUTH_ERROR });\r\n  }\r\n};\r\n\r\n//Register User\r\n\r\nexport const register = ({\r\n  name,\r\n  lname,\r\n  number,\r\n  email,\r\n  password,\r\n}) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ name, lname, number, email, password });\r\n  try {\r\n    const res = await axios.post(\"/api/users\", body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n//Login User\r\n\r\nexport const login = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n  try {\r\n    const res = await axios.post(\"/api/auth\", body, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// Logout / Clear Profile\r\n\r\nexport const logout = () => dispatch => {\r\n  dispatch({ type: LOGOUT });\r\n  dispatch({ type: CLEAR_PROFILE });\r\n};\r\n\r\n//  Check if User Exist via email\r\n\r\nexport const forgot_password = email => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email });\r\n  try {\r\n    const res = await axios.post(\"/api/auth/forgot\", body, config);\r\n    dispatch({\r\n      type: RESET_PASSWORD,\r\n      payload: res.data,\r\n    });\r\n    dispatch(send_otp());\r\n    dispatch(\r\n      setAlert(\r\n        \"One time pin (OTP) send to your mobile number. Please dont share this pin to anyone.\",\r\n        \"success\"\r\n      )\r\n    );\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n  }\r\n};\r\n\r\n//  SEND OTP\r\n\r\nexport const send_otp = number => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Cookie: \"devckie=db59-b300-9176-0043\",\r\n    },\r\n  };\r\n  const text = Math.floor(Math.random() * 899999 + 100000);\r\n  const body = JSON.stringify({\r\n    text: `Testing lng po ${text}`,\r\n    param: [{ number: \"09173146624\" }],\r\n  });\r\n  try {\r\n    const res = await axios.post(\r\n      \"https://192.168.1.2/api/send_sms\",\r\n      body,\r\n      config\r\n    );\r\n    dispatch({\r\n      type: SEND_OTP,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}