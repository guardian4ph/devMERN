{"ast":null,"code":"import axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from \"./types\";\nimport { setAlert } from \"./alert\"; //Load User check if there is a token for user\n//Register User\n\nexport const register = ({\n  name,\n  number,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    number,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/1App/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAlert","register","name","number","email","password","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","err","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,QAKO,SALP;AAMA,SAASC,QAAT,QAAyB,SAAzB,C,CAEA;AAEA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACvBC,EAAAA,IADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA,KAHuB;AAIvBC,EAAAA;AAJuB,CAAD,KAKlB,MAAMC,QAAN,IAAkB;AACtB,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAET,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,GAAf,CAAb;;AACA,MAAI;AACF,UAAMO,GAAG,GAAG,MAAMjB,KAAK,CAACkB,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,EAA+BF,MAA/B,CAAlB;AACAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAElB,gBADC;AAEPmB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIf,QAAQ,CAACN,QAAQ,CAACqB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDhB,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEjB;AADC,KAAD,CAAR;AAGD;AACF,CA7BM","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n} from \"./types\";\r\nimport { setAlert } from \"./alert\";\r\n\r\n//Load User check if there is a token for user\r\n\r\n//Register User\r\n\r\nexport const register = ({\r\n  name,\r\n  number,\r\n  email,\r\n  password,\r\n}) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ name, number, email, password });\r\n  try {\r\n    const res = await axios.post(\"/api/users\", body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}