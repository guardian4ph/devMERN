{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\layout\\\\Map2.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow, Autocomplete } from \"@react-google-maps/api\";\nimport Geodcode from \"react-geocode\";\nimport AutoComplete from \"react-google-autocomplete\";\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\n\nconst Map = () => {\n  var _s = $RefreshSig$();\n\n  const containerStyle = {\n    width: \"50%\",\n    height: \"200px\",\n    padding: \".5rem\",\n    marginTop: \".5rem\",\n    maxWidth: 1500,\n    margin: \"auto\",\n    borderRadius: \"5px\"\n  };\n\n  const MyComponent = () => {\n    _s();\n\n    const {\n      isLoaded\n    } = useJsApiLoader({\n      id: \"google-map-script\",\n      googleMapsApiKey: \" AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\"\n    });\n    const [map, setMap] = useState({\n      adddress: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n        // Load to specific address/location\n        lat: 10.3272994,\n        lng: 123.9431079 // lat: 0,\n        // lng: 0,\n\n      },\n      markerPosition: {\n        // Load to specific address/location\n        // lat: 10.3272994,\n        // lng: 123.9431079,\n        lat: 0,\n        lng: 0\n      }\n    });\n    const onLoad = useCallback(function callback(map) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          setMap({\n            mapPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            },\n            markerPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }, () => {\n            Geodcode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n              console.log(\"Response\", response);\n              const address = response.results[0].formatted_address,\n                    addressArray = response.results[0].address_components,\n                    city = this.getCity(addressArray),\n                    state = this.getState(addressArray),\n                    area = this.getArea(addressArray);\n              console.log(\"city is\", city);\n              console.log(\"Area is\", area);\n              console.log(\"state is\", state);\n              console.log(\"Address is\", address);\n              this.setState({\n                address: address ? address : \"\",\n                city: city ? city : \"\",\n                area: area ? area : \"\",\n                state: state ? city : \"\"\n              });\n            });\n          });\n        });\n      }\n    }, []);\n    const onUnmount = useCallback(function callback(map) {\n      setMap(null);\n    }, []);\n    return /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: setMap.mapPosition,\n      zoom: map.zoom // defaultOptions={{ styles: mapStyles }}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(MyComponent, \"SrPHBEZryE0KSSl30e0reWmHuKo=\", true);\n};\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/1App/client/src/components/layout/Map2.js"],"names":["React","useState","useCallback","GoogleMap","LoadScript","Marker","InfoWindow","Autocomplete","Geodcode","AutoComplete","setApiKey","Map","containerStyle","width","height","padding","marginTop","maxWidth","margin","borderRadius","MyComponent","isLoaded","useJsApiLoader","id","googleMapsApiKey","map","setMap","adddress","city","area","state","zoom","mapPosition","lat","lng","markerPosition","onLoad","callback","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fromLatLng","then","response","console","log","address","results","formatted_address","addressArray","address_components","getCity","getState","getArea","setState","onUnmount"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SACEC,SADF,EAEEC,UAFF,EAGEC,MAHF,EAIEC,UAJF,EAKEC,YALF,QAMO,wBANP;AAOA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAEAD,QAAQ,CAACE,SAAT,CAAmB,yCAAnB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,cAAc,GAAG;AACrBC,IAAAA,KAAK,EAAE,KADc;AAErBC,IAAAA,MAAM,EAAE,OAFa;AAGrBC,IAAAA,OAAO,EAAE,OAHY;AAIrBC,IAAAA,SAAS,EAAE,OAJU;AAKrBC,IAAAA,QAAQ,EAAE,IALW;AAMrBC,IAAAA,MAAM,EAAE,MANa;AAOrBC,IAAAA,YAAY,EAAE;AAPO,GAAvB;;AAUA,QAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAeC,cAAc,CAAC;AAClCC,MAAAA,EAAE,EAAE,mBAD8B;AAElCC,MAAAA,gBAAgB,EAAE;AAFgB,KAAD,CAAnC;AAKA,UAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBzB,QAAQ,CAAC;AAC7B0B,MAAAA,QAAQ,EAAE,EADmB;AAE7BC,MAAAA,IAAI,EAAE,EAFuB;AAG7BC,MAAAA,IAAI,EAAE,EAHuB;AAI7BC,MAAAA,KAAK,EAAE,EAJsB;AAK7BC,MAAAA,IAAI,EAAE,EALuB;AAM7BjB,MAAAA,MAAM,EAAE,GANqB;AAO7BkB,MAAAA,WAAW,EAAE;AACX;AACAC,QAAAA,GAAG,EAAE,UAFM;AAGXC,QAAAA,GAAG,EAAE,WAHM,CAIX;AACA;;AALW,OAPgB;AAc7BC,MAAAA,cAAc,EAAE;AACd;AACA;AACA;AACAF,QAAAA,GAAG,EAAE,CAJS;AAKdC,QAAAA,GAAG,EAAE;AALS;AAda,KAAD,CAA9B;AAuBA,UAAME,MAAM,GAAGlC,WAAW,CAAC,SAASmC,QAAT,CAAkBZ,GAAlB,EAAuB;AAChD,UAAIa,SAAS,CAACC,WAAd,EAA2B;AACzBD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAI;AACnDf,UAAAA,MAAM,CACJ;AACEM,YAAAA,WAAW,EAAE;AACXC,cAAAA,GAAG,EAAEQ,QAAQ,CAACC,MAAT,CAAgBC,QADV;AAEXT,cAAAA,GAAG,EAAEO,QAAQ,CAACC,MAAT,CAAgBE;AAFV,aADf;AAKET,YAAAA,cAAc,EAAE;AACdF,cAAAA,GAAG,EAAEQ,QAAQ,CAACC,MAAT,CAAgBC,QADP;AAEdT,cAAAA,GAAG,EAAEO,QAAQ,CAACC,MAAT,CAAgBE;AAFP;AALlB,WADI,EAWJ,MAAM;AACJpC,YAAAA,QAAQ,CAACqC,UAAT,CACEJ,QAAQ,CAACC,MAAT,CAAgBC,QADlB,EAEEF,QAAQ,CAACC,MAAT,CAAgBE,SAFlB,EAGEE,IAHF,CAGOC,QAAQ,IAAI;AACjBC,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AAEA,oBAAMG,OAAO,GAAGH,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBC,iBAApC;AAAA,oBACEC,YAAY,GAAGN,QAAQ,CAACI,OAAT,CAAiB,CAAjB,EAAoBG,kBADrC;AAAA,oBAEE1B,IAAI,GAAG,KAAK2B,OAAL,CAAaF,YAAb,CAFT;AAAA,oBAGEvB,KAAK,GAAG,KAAK0B,QAAL,CAAcH,YAAd,CAHV;AAAA,oBAIExB,IAAI,GAAG,KAAK4B,OAAL,CAAaJ,YAAb,CAJT;AAMAL,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBrB,IAAvB;AACAoB,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBpB,IAAvB;AACAmB,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBnB,KAAxB;AACAkB,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,OAA1B;AAEA,mBAAKQ,QAAL,CAAc;AACZR,gBAAAA,OAAO,EAAEA,OAAO,GAAGA,OAAH,GAAa,EADjB;AAEZtB,gBAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU,EAFR;AAGZC,gBAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU,EAHR;AAIZC,gBAAAA,KAAK,EAAEA,KAAK,GAAGF,IAAH,GAAU;AAJV,eAAd;AAMD,aAvBD;AAwBD,WApCG,CAAN;AAsCD,SAvCD;AAwCD;AACF,KA3CyB,EA2CvB,EA3CuB,CAA1B;AA6CA,UAAM+B,SAAS,GAAGzD,WAAW,CAAC,SAASmC,QAAT,CAAkBZ,GAAlB,EAAuB;AACnDC,MAAAA,MAAM,CAAC,IAAD,CAAN;AACD,KAF4B,EAE1B,EAF0B,CAA7B;AAIA,wBACE,QAAC,SAAD;AACE,MAAA,iBAAiB,EAAEd,cADrB;AAEE,MAAA,MAAM,EAAEc,MAAM,CAACM,WAFjB;AAGE,MAAA,IAAI,EAAEP,GAAG,CAACM,IAHZ,CAKE;;AALF;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD,GA/FD;;AAXgB,KAWVX,WAXU;AA2GjB,CA3GD;;KAAMT,G;AA4GN,eAAeA,GAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  LoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n  Autocomplete,\r\n} from \"@react-google-maps/api\";\r\nimport Geodcode from \"react-geocode\";\r\nimport AutoComplete from \"react-google-autocomplete\";\r\n\r\nGeodcode.setApiKey(\"AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\");\r\n\r\nconst Map = () => {\r\n  const containerStyle = {\r\n    width: \"50%\",\r\n    height: \"200px\",\r\n    padding: \".5rem\",\r\n    marginTop: \".5rem\",\r\n    maxWidth: 1500,\r\n    margin: \"auto\",\r\n    borderRadius: \"5px\",\r\n  };\r\n\r\n  const MyComponent = () => {\r\n    const { isLoaded } = useJsApiLoader({\r\n      id: \"google-map-script\",\r\n      googleMapsApiKey: \" AIzaSyAJjCD4TVrZk6u-OxFvk00OYpBqSMB_RVo\",\r\n    });\r\n\r\n    const [map, setMap] = useState({\r\n      adddress: \"\",\r\n      city: \"\",\r\n      area: \"\",\r\n      state: \"\",\r\n      zoom: 15,\r\n      height: 400,\r\n      mapPosition: {\r\n        // Load to specific address/location\r\n        lat: 10.3272994,\r\n        lng: 123.9431079,\r\n        // lat: 0,\r\n        // lng: 0,\r\n      },\r\n      markerPosition: {\r\n        // Load to specific address/location\r\n        // lat: 10.3272994,\r\n        // lng: 123.9431079,\r\n        lat: 0,\r\n        lng: 0,\r\n      },\r\n    });\r\n\r\n    const onLoad = useCallback(function callback(map) {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          setMap(\r\n            {\r\n              mapPosition: {\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude,\r\n              },\r\n              markerPosition: {\r\n                lat: position.coords.latitude,\r\n                lng: position.coords.longitude,\r\n              },\r\n            },\r\n            () => {\r\n              Geodcode.fromLatLng(\r\n                position.coords.latitude,\r\n                position.coords.longitude\r\n              ).then(response => {\r\n                console.log(\"Response\", response);\r\n\r\n                const address = response.results[0].formatted_address,\r\n                  addressArray = response.results[0].address_components,\r\n                  city = this.getCity(addressArray),\r\n                  state = this.getState(addressArray),\r\n                  area = this.getArea(addressArray);\r\n\r\n                console.log(\"city is\", city);\r\n                console.log(\"Area is\", area);\r\n                console.log(\"state is\", state);\r\n                console.log(\"Address is\", address);\r\n\r\n                this.setState({\r\n                  address: address ? address : \"\",\r\n                  city: city ? city : \"\",\r\n                  area: area ? area : \"\",\r\n                  state: state ? city : \"\",\r\n                });\r\n              });\r\n            }\r\n          );\r\n        });\r\n      }\r\n    }, []);\r\n\r\n    const onUnmount = useCallback(function callback(map) {\r\n      setMap(null);\r\n    }, []);\r\n\r\n    return (\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={setMap.mapPosition}\r\n        zoom={map.zoom}\r\n\r\n        // defaultOptions={{ styles: mapStyles }}\r\n      >\r\n        {/* <AutoComplete\r\n          className='autocomplete'\r\n          types={[\"(regions)\"]}\r\n           onPlaceSelected={onPlaceSelected}\r\n        /> */}\r\n\r\n        {/* <Marker position={map.mapPosition}></Marker> */}\r\n      </GoogleMap>\r\n    );\r\n  };\r\n};\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}