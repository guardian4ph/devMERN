{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\1App\\\\client\\\\src\\\\components\\\\layout\\\\Map2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { withGoogleMap, withScriptjs, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport mapStyles from \"./MapStyles\";\n\nconst Map = () => {\n  _s();\n\n  const [map, setMap] = useState({\n    adddress: \"\",\n    city: \"\",\n    area: \"\",\n    state: \"\",\n    zoom: 15,\n    height: 400,\n    mapPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    },\n    markerPosition: {\n      // Load to specific address/location\n      // lat: 10.3272994,\n      // lng: 123.9431079,\n      lat: 0,\n      lng: 0\n    }\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setMap({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geodcode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            console.log(\"Response\", response);\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  state = this.getState(addressArray),\n                  area = this.getArea(addressArray);\n            console.log(\"city is\", city);\n            console.log(\"Area is\", area);\n            console.log(\"state is\", state);\n            console.log(\"Address is\", address);\n            this.setState({\n              address: address ? address : \"\",\n              city: city ? city : \"\",\n              area: area ? area : \"\",\n              state: state ? city : \"\"\n            });\n          });\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    defaultZoom: setMap.zoom,\n    defaultCenter: {\n      lat: 10.3272994,\n      lng: 123.9431079\n    },\n    children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n      className: \"autocomplete\",\n      types: [\"(regions)\"],\n      onPlaceSelected: onPlaceSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Marker, {\n      draggable: true,\n      onDragEnd: onMarkerDragEnd,\n      position: {\n        lat: map.markerPosition.lat,\n        lng: map.markerPosition.lng\n      },\n      children: /*#__PURE__*/_jsxDEV(InfoWindow, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        marginTop: \"5px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"8luv0GyeF7iSMxHgpFCdY00sY6o=\");\n\n_c = Map;\nconst MapWrapped = withScriptjs(_c2 = withGoogleMap(Map));\n_c3 = MapWrapped;\nexport default App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MapWrapped, {\n      googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n      loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: `100%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this),\n      containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: `100%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 27\n      }, this),\n      mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: `100%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"MapWrapped$withScriptjs\");\n$RefreshReg$(_c3, \"MapWrapped\");","map":{"version":3,"sources":["D:/1App/client/src/components/layout/Map2.js"],"names":["React","useState","useEffect","withGoogleMap","withScriptjs","GoogleMap","Marker","InfoWindow","mapStyles","Map","map","setMap","adddress","city","area","state","zoom","height","mapPosition","lat","lng","markerPosition","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Geodcode","fromLatLng","then","response","console","log","address","results","formatted_address","addressArray","address_components","getCity","getState","getArea","setState","onPlaceSelected","onMarkerDragEnd","width","marginTop","MapWrapped","App","process","env","REACT_APP_GOOGLE_KEY"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  withGoogleMap,\r\n  withScriptjs,\r\n  GoogleMap,\r\n  Marker,\r\n  InfoWindow,\r\n} from \"react-google-maps\";\r\nimport mapStyles from \"./MapStyles\";\r\n\r\nconst Map = () => {\r\n  const [map, setMap] = useState({\r\n    adddress: \"\",\r\n    city: \"\",\r\n    area: \"\",\r\n    state: \"\",\r\n    zoom: 15,\r\n    height: 400,\r\n    mapPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n    markerPosition: {\r\n      // Load to specific address/location\r\n      // lat: 10.3272994,\r\n      // lng: 123.9431079,\r\n      lat: 0,\r\n      lng: 0,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        setMap(\r\n          {\r\n            mapPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n            markerPosition: {\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            },\r\n          },\r\n          () => {\r\n            Geodcode.fromLatLng(\r\n              position.coords.latitude,\r\n              position.coords.longitude\r\n            ).then(response => {\r\n              console.log(\"Response\", response);\r\n\r\n              const address = response.results[0].formatted_address,\r\n                addressArray = response.results[0].address_components,\r\n                city = this.getCity(addressArray),\r\n                state = this.getState(addressArray),\r\n                area = this.getArea(addressArray);\r\n\r\n              console.log(\"city is\", city);\r\n              console.log(\"Area is\", area);\r\n              console.log(\"state is\", state);\r\n              console.log(\"Address is\", address);\r\n\r\n              this.setState({\r\n                address: address ? address : \"\",\r\n                city: city ? city : \"\",\r\n                area: area ? area : \"\",\r\n                state: state ? city : \"\",\r\n              });\r\n            });\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <GoogleMap\r\n      defaultZoom={setMap.zoom}\r\n      defaultCenter={{\r\n        lat: 10.3272994,\r\n        lng: 123.9431079,\r\n      }}\r\n    >\r\n      <AutoComplete\r\n        className='autocomplete'\r\n        types={[\"(regions)\"]}\r\n        onPlaceSelected={onPlaceSelected}\r\n      />\r\n\r\n      <Marker\r\n        draggable={true}\r\n        onDragEnd={onMarkerDragEnd}\r\n        position={{\r\n          lat: map.markerPosition.lat,\r\n          lng: map.markerPosition.lng,\r\n        }}\r\n      >\r\n        <InfoWindow>\r\n          <div>test</div>\r\n        </InfoWindow>\r\n      </Marker>\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          marginTop: \"5px\",\r\n        }}\r\n      ></div>\r\n    </GoogleMap>\r\n  );\r\n};\r\n\r\nconst MapWrapped = withScriptjs(withGoogleMap(Map));\r\n\r\nexport default App = () => {\r\n  return (\r\n    <div style={{ width: \"100vw\", height: \"100vh\" }}>\r\n      <MapWrapped\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={<div style={{ height: `100%` }} />}\r\n        mapElement={<div style={{ height: `100%` }} />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}